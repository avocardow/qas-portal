generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.pnpm/@prisma+client@6.6.0_prisma@6.6.0_typescript@5.8.3__typescript@5.8.3/node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ========== Enums ==========

enum ClientStatus {
  prospect
  active
  archived
}

enum LicenseHolderType {
  client
  contact
}

enum ActivityLogType {
  note
  email_sent
  email_received
  call_in
  call_out
  status_change
  stage_change
  document_request
  document_received
  document_signed
  task_created
  task_completed
  meeting_summary
  billing_commentary
  external_folder_instructions
  software_access_instructions
  client_assigned
  audit_assigned
  audit_create
  audit_complete
}

// ========== Core Entities ==========

model Client {
  id                 String         @id @default(uuid()) @db.Uuid
  clientName         String
  abn                String?
  address            String?
  city               String?
  postcode           String?
  phone              String?        // Business contact phone number
  email              String?        // Business contact email address
  status             ClientStatus   @default(active)
  /// Stored as DATE (Australian format: DD/MM/YYYY)
  auditPeriodEndDate DateTime?      @db.Date
  /// Stored as DATE (Australian format: DD/MM/YYYY)
  nextContactDate    DateTime?      @db.Date
  /// Estimated annual fees (excl. GST) in AUD
  estAnnFees         Decimal?       @db.Decimal(10, 2)
  internalFolder     String?        @db.Text   // URL to internal SharePoint folder
  externalFolder     String?        @db.Text   // URL to external folder (Dropbox, etc.)
  xeroContactId      String?        @unique
  createdAt          DateTime       @default(now()) @db.Timestamptz
  updatedAt          DateTime       @updatedAt @db.Timestamptz
  assignedUserId     String?        @db.Uuid
  assignedUser       User?          @relation(name: "ClientManager", fields: [assignedUserId], references: [id], onDelete: SetNull)

  contacts      Contact[]
  trustAccounts TrustAccount[]
  licenses      License[]
  audits        Audit[]
  documents     DocumentReference[] @relation("ClientDocuments")
  callLogs      CallLog[]
  activityLogs  ActivityLog[] @relation("ClientLogs")
  notes         Note[]        @relation("ClientNotes")

  @@map("clients")
}

model Contact {
  id               String    @id @default(uuid()) @db.Uuid
  clientId         String    @db.Uuid
  name             String? // Optional
  email            String?   @unique
  phone            String?
  title            String?
  isPrimary        Boolean   @default(false)
  canLoginToPortal Boolean   @default(false)
  portalUserId     String?   @unique @db.Uuid
  createdAt        DateTime  @default(now()) @db.Timestamptz
  updatedAt        DateTime  @updatedAt @db.Timestamptz

  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  portalUser   User?         @relation(fields: [portalUserId], references: [id], onDelete: SetNull)
  licenses     License[]
  callLogs     CallLog[]
  activityLogs ActivityLog[] @relation("ContactLogs")
  notes        Note[]        @relation("ContactNotes")

  @@index([clientId])
  @@map("contacts")
}

model TrustAccount {
  id                  String   @id @default(uuid()) @db.Uuid
  clientId            String   @db.Uuid
  accountName         String?
  bankName            String
  bsb                 String?
  accountNumber       String?
  primaryLicenseId    String?  @db.Uuid
  hasSoftwareAccess   Boolean  @default(false)
  managementSoftware  String?
  softwareUrl         String?
  createdAt           DateTime @default(now()) @db.Timestamptz
  updatedAt           DateTime @updatedAt @db.Timestamptz

  client         Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  primaryLicense License?      @relation(name: "PrimaryLicenseForTrustAccount", fields: [primaryLicenseId], references: [id], onDelete: SetNull)
  notes          Note[]        @relation("TrustAccountNotes")

  @@index([clientId])
  @@index([primaryLicenseId])
  @@map("trustAccounts")
}

model License {
  id             String            @id @default(uuid()) @db.Uuid
  holderType     LicenseHolderType
  clientId       String?           @db.Uuid
  contactId      String?           @db.Uuid
  licenseNumber  String            @unique
  licenseType    String?
  renewalMonth   Int?              @db.SmallInt
  isPrimary      Boolean           @default(false)
  createdAt      DateTime          @default(now()) @db.Timestamptz
  updatedAt      DateTime          @updatedAt @db.Timestamptz

  client                Client?        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  contact               Contact?       @relation(fields: [contactId], references: [id], onDelete: Cascade)
  primaryForTrustAccounts TrustAccount[] @relation("PrimaryLicenseForTrustAccount")
  notes                 Note[]         @relation("LicenseNotes")

  @@index([clientId])
  @@index([contactId])
  @@map("licenses")
}

// ========== User Authentication & Roles ==========

model User {
  id                String    @id @default(uuid()) @db.Uuid
  name              String?
  email             String?   @unique
  emailVerified     DateTime? @map("emailVerified") @db.Timestamptz
  image             String?
  roleId            Int
  m365ObjectId      String?   @unique
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now()) @db.Timestamptz
  updatedAt         DateTime  @updatedAt @db.Timestamptz

  role              Role                @relation(fields: [roleId], references: [id])
  accounts          Account[]
  sessions          Session[]
  clientContact     Contact?
  auditAssignments  AuditAssignment[]
  assignedTasks     Task[]              @relation("AssignedTasks")
  uploadedDocuments DocumentReference[] @relation("UploadedDocuments")
  managedClients    Client[]            @relation(name: "ClientManager")
  notifications     Notification[]
  sentMessages      Message[]           @relation("SentMessages")
  callLogs          CallLog[]
  activityLogs      ActivityLog[]       @relation("UserLogs")
  notes             Note[]              @relation("UserNotes")
  modifiedActivityLogs ActivityLog[]    @relation("ActivityLogModifier")

  @@map("users")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @map("userId") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("providerAccountId")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  ext_expires_in    Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("sessionToken")
  userId       String   @map("userId") @db.Uuid
  expires      DateTime @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]

  @@map("roles")
}

// ========== Audit & Task Management ==========

model AuditStage {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  description  String?
  audits       Audit[]

  @@map("auditStages")
}

model AuditStatus {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  audits      Audit[]

  @@map("auditStatuses")
}

model Audit {
  id                String    @id @default(uuid()) @db.Uuid
  clientId          String    @db.Uuid
  auditYear         Int
  stageId           Int?
  statusId          Int?
  /// Stored as DATE (Australian format: DD/MM/YYYY)
  reportDueDate     DateTime? @db.Date
  /// Stored as DATE (Australian format: DD/MM/YYYY)
  lodgedWithOFTDate DateTime? @db.Date
  /// Stored as DATE (Australian format: DD/MM/YYYY)
  invoiceIssueDate  DateTime? @db.Date
  invoicePaid       Boolean   @default(false)
  createdAt         DateTime  @default(now()) @db.Timestamptz
  updatedAt         DateTime  @updatedAt @db.Timestamptz

  client       Client            @relation(fields: [clientId], references: [id], onDelete: Restrict)
  stage        AuditStage?       @relation(fields: [stageId], references: [id], onDelete: SetNull)
  status       AuditStatus?      @relation(fields: [statusId], references: [id], onDelete: SetNull)
  assignments  AuditAssignment[]
  tasks        Task[]
  documents    DocumentReference[] @relation("AuditDocuments")
  messages     Message[]
  activityLogs ActivityLog[] @relation("AuditLogs")
  notes        Note[]        @relation("AuditNotes")

  @@unique([clientId, auditYear])
  @@index([clientId])
  @@index([stageId])
  @@index([statusId])
  @@map("audits")
}

model AuditAssignment {
  id         String   @id @default(uuid()) @db.Uuid
  auditId    String   @db.Uuid
  userId     String   @db.Uuid
  role       String?
  assignedAt DateTime @default(now()) @db.Timestamptz

  audit Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([auditId, userId])
  @@index([auditId])
  @@index([userId])
  @@map("auditAssignments")
}

model Task {
  id                   String    @id @default(uuid()) @db.Uuid
  auditId              String    @db.Uuid
  name                 String
  description          String?   @db.Text
  assignedUserId       String?   @db.Uuid
  status               String    @default("To Do")
  /// Stored as DATE (Australian format: DD/MM/YYYY)
  dueDate              DateTime? @db.Date
  priority             String?
  requiresClientAction Boolean   @default(false)
  /// Stored as DATE (Australian format: DD/MM/YYYY)
  completedAt          DateTime? @db.Date
  createdAt            DateTime  @default(now()) @db.Timestamptz
  updatedAt            DateTime  @updatedAt @db.Timestamptz

  audit        Audit              @relation(fields: [auditId], references: [id], onDelete: Cascade)
  assignedUser User?             @relation(name: "AssignedTasks", fields: [assignedUserId], references: [id], onDelete: SetNull)
  documents    DocumentReference[] @relation("TaskDocuments")
  activityLogs ActivityLog[] @relation("TaskLogs")
  notes        Note[]        @relation("TaskNotes")

  @@index([auditId])
  @@index([assignedUserId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

// ========== Supporting Features ==========

model ActivityLog {
  id        String          @id @default(uuid()) @db.Uuid
  auditId   String?         @db.Uuid
  clientId  String          @db.Uuid
  taskId    String?         @db.Uuid
  contactId String?         @db.Uuid
  createdBy String?         @db.Uuid
  modifiedBy String?        @db.Uuid
  type      ActivityLogType @default(note)
  content   String          @db.Text
  createdAt DateTime        @default(now()) @db.Timestamptz

  audit   Audit?   @relation(name: "AuditLogs", fields: [auditId], references: [id], onDelete: SetNull)
  client  Client   @relation(name: "ClientLogs", fields: [clientId], references: [id], onDelete: Cascade)
  task    Task?    @relation(name: "TaskLogs", fields: [taskId], references: [id], onDelete: SetNull)
  contact Contact? @relation(name: "ContactLogs", fields: [contactId], references: [id], onDelete: SetNull)
  creator User?    @relation(name: "UserLogs", fields: [createdBy], references: [id], onDelete: Restrict)
  modifier User?   @relation("ActivityLogModifier", fields: [modifiedBy], references: [id], onDelete: SetNull)

  @@index([auditId])
  @@index([clientId])
  @@index([taskId])
  @@index([createdBy])
  @@index([type])
  @@index([createdAt(sort: Desc)])
  @@map("activityLogs")
}

model Note {
  id             String    @id @default(uuid()) @db.Uuid
  content        String    @db.Text
  userId         String    @db.Uuid
  createdAt      DateTime  @default(now()) @db.Timestamptz
  updatedAt      DateTime  @updatedAt @db.Timestamptz

  clientId       String?   @db.Uuid
  contactId      String?   @db.Uuid
  auditId        String?   @db.Uuid
  taskId         String?   @db.Uuid
  licenseId      String?   @db.Uuid
  trustAccountId String?   @db.Uuid

  client       Client?       @relation(name: "ClientNotes", fields: [clientId], references: [id], onDelete: Cascade)
  contact      Contact?      @relation(name: "ContactNotes", fields: [contactId], references: [id], onDelete: Cascade)
  audit        Audit?        @relation(name: "AuditNotes", fields: [auditId], references: [id], onDelete: Cascade)
  task         Task?         @relation(name: "TaskNotes", fields: [taskId], references: [id], onDelete: Cascade)
  license      License?      @relation(name: "LicenseNotes", fields: [licenseId], references: [id], onDelete: Cascade)
  trustAccount TrustAccount? @relation(name: "TrustAccountNotes", fields: [trustAccountId], references: [id], onDelete: Cascade)
  user         User          @relation(name: "UserNotes", fields: [userId], references: [id], onDelete: Restrict)

  @@index([clientId])
  @@index([contactId])
  @@index([auditId])
  @@index([taskId])
  @@index([licenseId])
  @@index([trustAccountId])
  @@index([userId])
  @@map("notes")
}

model DocumentReference {
  id                 String    @id @default(uuid()) @db.Uuid
  auditId            String?   @db.Uuid
  taskId             String?   @db.Uuid
  clientId           String?   @db.Uuid
  fileName           String
  fileType           String?
  sharepointItemId   String?
  sharepointFileUrl  String?
  uploadedByUserId   String?   @db.Uuid
  isClientUpload     Boolean   @default(false)
  isSharedWithClient Boolean   @default(false)
  esignProvider      String?
  esignEnvelopeId    String?
  esignStatus        String?
  createdAt          DateTime  @default(now()) @db.Timestamptz
  updatedAt          DateTime  @updatedAt @db.Timestamptz

  audit          Audit? @relation(name: "AuditDocuments", fields: [auditId], references: [id], onDelete: SetNull)
  task           Task?  @relation(name: "TaskDocuments", fields: [taskId], references: [id], onDelete: SetNull)
  client         Client? @relation(name: "ClientDocuments", fields: [clientId], references: [id], onDelete: SetNull)
  uploadedByUser User?  @relation(name: "UploadedDocuments", fields: [uploadedByUserId], references: [id], onDelete: SetNull)

  @@index([auditId])
  @@index([taskId])
  @@index([clientId])
  @@map("documentReferences")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  message   String   @db.Text
  linkUrl   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}

model Message {
  id             String   @id @default(uuid()) @db.Uuid
  auditId        String   @db.Uuid
  senderUserId   String   @db.Uuid
  content        String   @db.Text
  isReadByTeam   Boolean  @default(false)
  isReadByClient Boolean  @default(false)
  createdAt      DateTime @default(now()) @db.Timestamptz

  audit  Audit @relation(fields: [auditId], references: [id], onDelete: Cascade)
  sender User  @relation(name: "SentMessages", fields: [senderUserId], references: [id], onDelete: Cascade)

  @@index([auditId])
  @@map("messages")
}

model CallLog {
  id            String    @id @default(uuid()) @db.Uuid
  callingUserId String    @db.Uuid
  clientId      String?   @db.Uuid
  contactId     String?   @db.Uuid
  dialedNumber  String
  /// Timestamp (with timezone) for call start
  startTime     DateTime  @db.Timestamptz
  /// Timestamp (with timezone) for call end
  endTime       DateTime? @db.Timestamptz
  durationSeconds Int?
  teamsCallId   String?
  notes         String?   @db.Text
  transcript    String?   @db.Text
  createdAt     DateTime  @default(now()) @db.Timestamptz

  callingUser User    @relation(fields: [callingUserId], references: [id], onDelete: Cascade)
  client      Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  contact     Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@index([callingUserId])
  @@index([clientId])
  @@map("callLogs")
}

model EmailTemplate {
  id                         String   @id @default(uuid()) @db.Uuid
  name                       String   @unique
  subject                    String
  body                       String   @db.Text
  isEditableByManagerAuditor Boolean  @default(false)
  createdAt                  DateTime @default(now()) @db.Timestamptz
  updatedAt                  DateTime @updatedAt @db.Timestamptz

  @@map("emailTemplates")
}