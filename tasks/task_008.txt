# Task ID: 8
# Title: Develop Activity Card with Quick-Add
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create the Activity Card showing recent activities with pagination and quick-add functionality on the Client Profile page.
# Details:
Implement TailAdmin ActivitiesCard showing recent notes, call logs, status changes with appropriate icons. Add pagination controls to show only the most recent items. Create Quick-Add Activity inline controls to add any activityLog type (Note, Email, Call, Billing Commentary, Meeting, Document), always linked to the Client, optionally a Contact, and the current team member.

# Test Strategy:
Test activity display with various activity types. Verify pagination works correctly. Test quick-add functionality for all activity types. Check that newly added activities appear in the list.

# Subtasks:
## 1. Create Activity Card UI with Pagination [pending]
### Dependencies: None
### Description: Implement the base Activity Card component that displays recent activities with pagination controls using TailAdmin design patterns.
### Details:
1. Create a new ActivityCard component that follows the TailAdmin design system.
2. Implement the card layout with appropriate headers and styling.
3. Design the activity item component to display different activity types (notes, call logs, status changes) with corresponding icons.
4. Add a data fetching mechanism using React Query or SWR for efficient pagination and caching.
5. Implement pagination controls that limit the display to the most recent items.
6. Create skeleton loading states for better UX during data fetching.
7. Ensure the component is responsive across different screen sizes.
8. Add proper accessibility attributes (ARIA labels, keyboard navigation).
9. Test the pagination functionality with mock data to ensure it works correctly.
10. Implement error handling for failed data fetching scenarios.

## 2. Develop Quick-Add Activity Form [pending]
### Dependencies: 8.1
### Description: Create an inline Quick-Add form that allows users to add different types of activities (Note, Email, Call, Billing Commentary, Meeting, Document) with appropriate fields and validation.
### Details:
1. Design and implement an expandable/collapsible Quick-Add form within the Activity Card.
2. Create a dropdown or tab system to select different activity types (Note, Email, Call, Billing Commentary, Meeting, Document).
3. Implement dynamic form fields that change based on the selected activity type.
4. Add form validation for required fields using a form library like Formik or React Hook Form.
5. Ensure the form always links activities to the current Client.
6. Add an optional Contact selection field that pulls from available contacts for the client.
7. Automatically associate the activity with the current team member.
8. Implement optimistic UI updates to show new activities immediately after submission.
9. Add appropriate error handling and success notifications.
10. Ensure the form is keyboard accessible and follows accessibility best practices.

## 3. Integrate Activity Management with Backend and Finalize [pending]
### Dependencies: 8.1, 8.2
### Description: Connect the Activity Card and Quick-Add form to backend APIs, implement real-time updates, and finalize the component with comprehensive testing.
### Details:
1. Create or integrate with backend API endpoints for fetching paginated activities.
2. Implement API calls for creating new activities of different types.
3. Add real-time updates using WebSockets or polling when new activities are added by other users.
4. Implement proper error handling for all API interactions.
5. Add activity filtering capabilities based on type or date range.
6. Optimize performance by implementing virtualization for long activity lists.
7. Write unit tests for component logic and integration tests for API interactions.
8. Perform cross-component testing to ensure the Activity Card works correctly within the larger application.
9. Conduct accessibility testing and fix any issues.
10. Document the component API, props, and usage examples for other developers.
11. Perform final cross-browser and cross-device testing to ensure consistent behavior.

