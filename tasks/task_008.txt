# Task ID: 8
# Title: Gate Fees and Status Columns in Clients Table Using Authorized Component
# Status: done
# Dependencies: None
# Priority: medium
# Description: Implement access control for the Fees and Status columns in the Clients table by utilizing the new Authorized component and useAbility hook to restrict visibility based on user permissions.
# Details:
This task involves modifying the Clients table to conditionally render the Fees and Status columns based on user permissions:

1. Import the new Authorized component and useAbility hook in the Clients table component
2. Determine the appropriate ability/permission that should control access to the Fees column (likely financial or billing permissions)
3. Determine the appropriate ability/permission that should control access to the Status column (likely client management permissions)
4. Wrap the Fees column content in the Authorized component with the appropriate ability check
5. Wrap the Status column content in the Authorized component with the appropriate ability check
6. For both columns, implement appropriate fallback content to display when a user lacks permission (e.g., a dash, 'Restricted', or completely hide the column)
7. If completely hiding columns, ensure the table layout remains consistent and doesn't break when columns are removed
8. Update any related filtering or sorting functionality to account for potentially hidden columns
9. Ensure that any data export functionality respects these same permission restrictions

The implementation should use the new authorization pattern consistently and avoid any direct references to the legacy RBAC system that was removed in Task #5.

# Test Strategy:
Testing should verify proper access control across different user roles:

1. Unit Tests:
   - Test the Clients table component with mocked useAbility responses for different permission scenarios
   - Verify correct rendering/hiding of Fees column based on permissions
   - Verify correct rendering/hiding of Status column based on permissions
   - Test fallback content displays correctly when permissions are denied

2. Integration Tests:
   - Verify the component works correctly with the actual useAbility hook (not mocked)
   - Test that filtering and sorting still work correctly when columns are hidden

3. Manual Testing:
   - Use the developer impersonation feature (from Task #7) to test with different user roles:
     - Admin users should see both Fees and Status columns
     - Users with financial permissions but not client management should see Fees but not Status
     - Users with client management but not financial permissions should see Status but not Fees
     - Users with neither permission should see neither column
   - Verify the table layout remains visually consistent regardless of which columns are visible
   - Test data export functionality to ensure it respects the same permissions

# Subtasks:
## 1. Implement Authorized Component and useAbility Hook for Column Access Control [done]
### Dependencies: None
### Description: Create or adapt the Authorized component and useAbility hook to handle column-level access control in the Clients table. This foundation will enable permission-based visibility of sensitive data.
### Details:
1. Create or adapt the Authorized component that accepts resource, action, children, and fallback props
2. Implement the useAbility hook to check user permissions against required abilities
3. Define the specific permission constants for fees access ('read:client:fees') and status access ('read:client:status')
4. Ensure the hook properly integrates with the existing authentication system
5. Add appropriate TypeScript interfaces/types for the component and hook
6. Write unit tests for the Authorized component with various permission scenarios
7. Test the useAbility hook with mocked permission sets
8. Document the component and hook usage patterns for team reference

Testing approach: Create Jest unit tests that verify the Authorized component renders children when permissions exist and fallback content when they don't. Mock the useAbility hook to return different permission sets for testing.

## 2. Implement Permission-Based Column Rendering in Clients Table [done]
### Dependencies: 8.1
### Description: Modify the Clients table component to conditionally render the Fees and Status columns based on user permissions using the Authorized component and useAbility hook.
### Details:
1. Import the Authorized component and useAbility hook in the Clients table component
2. Identify the table header and data cell rendering logic for the Fees column
3. Wrap the Fees column header and data cells with the Authorized component using the 'read:client:fees' permission
4. Implement appropriate fallback content for unauthorized Fees access (e.g., a dash or 'Restricted')
5. Repeat steps 3-4 for the Status column using the 'read:client:status' permission
6. Ensure table layout remains consistent when columns are hidden (consider using CSS grid or flexbox for stability)
7. Update any column configuration objects that might be used for dynamic rendering
8. Test the component with different user permission sets to verify correct rendering

Testing approach: Create component tests that render the Clients table with different mocked permission sets and verify that columns appear or are hidden appropriately. Check that the table layout remains stable regardless of which columns are visible.

## 3. Update Related Functionality to Respect Column Permissions [done]
### Dependencies: 8.2
### Description: Ensure that all related table functionality (sorting, filtering, exporting, etc.) respects the same permission restrictions applied to the Fees and Status columns.
### Details:
1. Identify all places where the Fees and Status columns are referenced in sorting functionality
2. Modify sorting logic to check permissions before allowing sorts on restricted columns
3. Update filtering components to hide filter options for columns the user cannot access
4. Modify any data export functionality to exclude restricted columns from exports
5. Update any column visibility toggles to respect permission restrictions
6. Ensure search functionality doesn't reveal restricted data in results
7. Add integration tests that verify these features respect permissions
8. Perform end-to-end testing with different user roles to verify complete implementation

Testing approach: Create integration tests that simulate user interactions like sorting, filtering, and exporting with different permission sets. Verify that these operations correctly respect column access permissions. Include edge cases like what happens when a user's permissions change while using the application.

