# Task ID: 8
# Title: Implement SharePoint Integration and Invoices Card
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Create the SharePoint folder browser and recent invoices components.
# Details:
Embed the file-manager tree for client's SharePoint folders by reusing AllFolders component. Implement the Recent Invoices Card listing the last 5 invoice documents with status (paid/unpaid) and links to PDFs. Integrate with existing File-Manager components as specified in the PRD.

# Test Strategy:
Test SharePoint folder navigation. Verify invoice links work correctly. Test with various document states and permissions.

# Subtasks:
## 1. Implement SharePoint Folder Browser Component [pending]
### Dependencies: None
### Description: Create a reusable SharePoint folder browser by adapting the existing AllFolders component to display client's SharePoint folders in a hierarchical tree structure with proper navigation.
### Details:
Implementation steps:

1. Set up SharePoint API integration:
   - Implement authentication using OAuth 2.0 with Azure AD
   - Configure the @pnp/sp library for SharePoint REST API calls
   - Create service methods for fetching folder structure and contents

2. Adapt the AllFolders component:
   - Modify the component to accept SharePoint folder paths
   - Implement lazy loading to fetch folder contents on demand
   - Add breadcrumb navigation for easy traversal between folders
   - Ensure clear visual distinction between files and folders

3. Implement folder navigation:
   - Create click handlers for folder expansion/collapse
   - Maintain navigation state using React hooks or context
   - Add loading indicators during API calls
   - Implement error handling for permission issues or network failures

4. Testing approach:
   - Unit test the SharePoint service methods with mock data
   - Test folder navigation with different folder depths
   - Verify proper handling of empty folders and error states
   - Test performance with large folder structures

## 2. Develop Recent Invoices Card Component [pending]
### Dependencies: 8.1
### Description: Create a card component that displays the 5 most recent invoice documents with their payment status (paid/unpaid) and direct links to the PDF files.
### Details:
Implementation steps:

1. Design the invoices card UI:
   - Create a responsive card layout using Fluent UI components
   - Design status indicators for paid/unpaid invoices
   - Include invoice number, date, amount, and status fields
   - Add PDF preview or direct download links

2. Implement data fetching:
   - Create a service to fetch invoice metadata from SharePoint
   - Implement sorting by date (most recent first)
   - Add filtering for invoice document types
   - Limit results to 5 items with option to view more

3. Develop status indicators:
   - Implement logic to determine payment status from metadata
   - Create visual indicators (icons/colors) for paid vs. unpaid status
   - Add tooltips for additional status information

4. Add PDF linking functionality:
   - Generate secure links to invoice PDFs in SharePoint
   - Implement preview functionality if applicable
   - Handle permission checks before displaying links

5. Testing approach:
   - Unit test the invoice fetching service
   - Test sorting and filtering logic
   - Verify correct status determination
   - Test PDF link generation and security

## 3. Integrate Components with Existing File-Manager [pending]
### Dependencies: 8.1, 8.2
### Description: Connect the SharePoint folder browser and Recent Invoices card with the existing File-Manager components as specified in the PRD, ensuring seamless interaction between components.
### Details:
Implementation steps:

1. Review existing File-Manager architecture:
   - Analyze current component structure and data flow
   - Identify integration points for new components
   - Document required modifications to existing components

2. Implement component integration:
   - Add the SharePoint folder browser to the main file navigation
   - Position the Recent Invoices card according to PRD specifications
   - Ensure consistent styling across all components
   - Implement shared state management if needed

3. Establish cross-component communication:
   - Create event handlers for file/folder selection
   - Implement navigation synchronization between components
   - Ensure invoice selection in the card updates the main view
   - Add context awareness between components

4. Optimize performance:
   - Implement caching for frequently accessed folders
   - Add pagination or virtualization for large folder structures
   - Optimize re-renders using React.memo or shouldComponentUpdate
   - Ensure responsive behavior across device sizes

5. Testing approach:
   - Integration tests for component interaction
   - End-to-end tests for common user flows
   - Verify behavior matches PRD specifications
   - Test performance with realistic data volumes
   - Cross-browser and cross-device testing

