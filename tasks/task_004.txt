# Task ID: 4
# Title: Implement Teams Chat Integration
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Create backend and frontend components to integrate Microsoft Teams chat functionality, allowing users to view chat history and send messages within the portal.
# Details:
1. Create tRPC `chatRouter` with procedures: `listRecent`, `getMessages`, `sendMessage`, `findUsers`, `createOneToOne`, `createGroup`
2. Configure Graph API permissions: `Chat.ReadWrite`, `User.Read.All`
3. Implement `/chat` page with chat list pane, message pane, and message input components
4. Add pagination/infinite scroll for message history
5. Create user search functionality for starting new chats
6. Implement new chat creation flows (1:1 and group)
7. Add loading states and error handling

# Test Strategy:
1. Verify chat list and messages load correctly
2. Test message sending functionality
3. Confirm user search and new chat creation work as expected
4. Validate pagination/infinite scroll with large chat histories
5. Test error handling for network issues and permission problems

# Subtasks:
## 1. Set Up Microsoft Teams API Integration and Permissions [pending]
### Dependencies: None
### Description: Configure Microsoft Graph API access and ensure the application has the necessary permissions to read and send Teams chat messages.
### Details:
Register the application in Azure AD, configure required API permissions (`Chat.ReadWrite`, `User.Read.All`), and set up authentication flows. Ensure admin consent is granted for these permissions so the backend can interact with Teams chat endpoints.

## 2. Implement tRPC Chat Router and Backend Procedures [pending]
### Dependencies: 4.1
### Description: Develop the backend chat router with all necessary procedures for chat operations.
### Details:
Create a tRPC `chatRouter` with procedures: `listRecent`, `getMessages`, `sendMessage`, `findUsers`, `createOneToOne`, and `createGroup`. Each procedure should interact with the Microsoft Graph API to perform its respective function, handling authentication and error cases.

## 3. Develop Frontend Chat Page and Core UI Components [pending]
### Dependencies: 4.2
### Description: Build the main `/chat` page with chat list, message pane, and message input, connecting to the backend procedures.
### Details:
Implement the chat list pane to display recent chats, a message pane to show chat history, and a message input component for sending messages. Connect these components to the tRPC backend and ensure real-time updates where possible.

## 4. Add Pagination, Infinite Scroll, and User Search Functionality [pending]
### Dependencies: 4.3
### Description: Enhance the chat UI with message history pagination/infinite scroll and implement user search for starting new chats.
### Details:
Implement pagination or infinite scroll in the message pane to load older messages as the user scrolls. Add a user search component that leverages the `findUsers` backend procedure, enabling users to search and select contacts for new chats.

## 5. Implement New Chat Creation Flows and Robust UX States [pending]
### Dependencies: 4.4
### Description: Enable creation of new one-to-one and group chats, and add comprehensive loading and error handling throughout the chat experience.
### Details:
Integrate flows for creating new chats (both 1:1 and group) using the respective backend procedures. Ensure all UI components display appropriate loading indicators and error messages, providing a smooth and resilient user experience.

