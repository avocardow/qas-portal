# Task ID: 4
# Title: Implement Authorized Component Gating
# Status: in-progress
# Dependencies: 3
# Priority: medium
# Description: Replace direct permission checks in JSX with the Authorized component wrapper for consistent UI element gating.
# Details:
Import the Authorized component from @/components/Authorized. Replace conditional rendering patterns like {canAccess('some.permission') && <Button />} with <Authorized action="some.permission"><Button /></Authorized>. Focus on buttons, links, table columns, and other UI elements that should be conditionally displayed based on permissions. Ensure all action props match the permission strings in the permissionSchema.

# Test Strategy:
Create a test harness that allows toggling between different user roles to visually verify UI elements appear/disappear appropriately. Add component tests that verify the Authorized component correctly shows/hides children based on permissions.

# Subtasks:
## 1. Create Authorized Component Wrapper [done]
### Dependencies: None
### Description: Create or update the Authorized component to handle permission-based UI element gating consistently across the application.
### Details:
1. Review the existing Authorized component in @/components/Authorized
2. Ensure it accepts an 'action' prop that corresponds to permission strings
3. Implement proper fallback handling (null by default)
4. Add support for multiple permissions (array of strings)
5. Optimize with React.memo to prevent unnecessary re-renders
6. Add proper TypeScript typing for the component props
7. Test the component with various permission scenarios
8. Document usage patterns for the team

## 2. Replace Button Permission Checks [pending]
### Dependencies: 4.1
### Description: Identify and replace all conditional button rendering based on permissions with the Authorized component wrapper.
### Details:
1. Search codebase for patterns like {canAccess('permission') && <Button />}
2. Replace with <Authorized action="permission"><Button /></Authorized>
3. For multiple permission checks, use appropriate logic in the Authorized component
4. Ensure action props match exactly with permissionSchema strings
5. Test each button to verify it appears/disappears correctly based on user permissions
6. Pay special attention to action buttons in tables, forms, and card components
7. Update any unit tests that may be affected by this change

## 3. Replace Link Permission Checks [pending]
### Dependencies: 4.1
### Description: Identify and replace all conditional link rendering based on permissions with the Authorized component wrapper.
### Details:
1. Search for navigation links with permission checks in menus, sidebars, and headers
2. Replace conditional rendering with <Authorized action="permission"><Link /></Authorized>
3. For complex navigation components, ensure the Authorized wrapper doesn't break styling
4. Check for any custom link components that might need special handling
5. Test navigation to ensure links appear/disappear correctly based on permissions
6. Update breadcrumb navigation if it uses permission-based rendering
7. Verify mobile navigation components work correctly with the Authorized wrapper

## 4. Replace Table Column Permission Checks [pending]
### Dependencies: 4.1
### Description: Update table configurations to use Authorized components for permission-based column visibility.
### Details:
1. Identify tables with columns that should be conditionally displayed based on permissions
2. For tables using column definitions, wrap column cell renderers with Authorized components
3. For action columns with multiple buttons, wrap each button individually
4. Update any column visibility logic that uses permissions
5. Test tables with different user permission sets to ensure correct column visibility
6. Ensure table responsiveness is maintained after adding Authorized wrappers
7. Update any column customization features to respect permission boundaries

## 5. Replace Form Element Permission Checks [pending]
### Dependencies: 4.1
### Description: Update forms to use Authorized components for conditionally rendering form elements based on permissions.
### Details:
1. Identify form fields, sections, or controls that should be conditionally displayed
2. Replace conditional rendering with Authorized component wrappers
3. For form libraries (like Formik or React Hook Form), ensure Authorized components don't interfere with form state
4. Consider adding disabled state for unauthorized fields instead of hiding them completely where appropriate
5. Test form submission with different permission sets to ensure correct behavior
6. Update form validation to account for conditionally rendered fields
7. Ensure error messages and help text are properly handled with conditional rendering

## 6. Replace Feature Section Permission Checks [pending]
### Dependencies: 4.1
### Description: Update larger UI sections and feature areas to use Authorized components for permission-based visibility.
### Details:
1. Identify entire sections, cards, or feature areas that should be conditionally displayed
2. Replace section-level conditional rendering with Authorized component wrappers
3. For complex layouts, ensure the Authorized component doesn't break grid or flexbox structures
4. Consider adding placeholder or alternative content for unauthorized sections
5. Test page layouts with different permission sets to ensure correct section visibility
6. Update any responsive behavior that might be affected by conditional rendering
7. Ensure loading states are properly handled when sections are conditionally rendered

## 7. Implement Comprehensive Testing and Validation [pending]
### Dependencies: 4.2, 4.3, 4.4, 4.5, 4.6
### Description: Create tests and validation procedures to ensure all permission-based UI gating works correctly across the application.
### Details:
1. Create unit tests for the Authorized component with various permission scenarios
2. Develop integration tests for key pages to verify correct element visibility
3. Create a permission testing matrix to systematically verify all UI elements
4. Implement visual regression tests to catch unexpected UI changes
5. Verify that all action props exactly match the permissionSchema strings
6. Test edge cases like loading states and permission changes while using the app
7. Document any components that required special handling for the Authorized wrapper
8. Create a validation checklist for developers to use when implementing new features

