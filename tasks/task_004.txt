# Task ID: 4
# Title: Implement Audit Tracking Backend
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create tRPC procedures in auditRouter for Audit management with RBAC
# Details:
Implement the following tRPC procedures in auditRouter: 1) audit.create (input: clientId, auditYear, initial stageId/statusId), 2) audit.updateStageStatus (input: auditId, stageId, statusId), 3) audit.getByClientId for client detail audit history, 4) audit.getById for full audit details including tasks and assignments, 5) audit.assignUser and audit.unassignUser to manage AuditAssignment records. Enforce RBAC for all procedures, restricting certain operations to Auditor/Manager/Admin roles.

# Test Strategy:
Write unit tests for each procedure verifying correct data manipulation, relationship management, and RBAC enforcement. Test edge cases like duplicate audit years for the same client.

# Subtasks:
## 1. Design Audit Data Models and RBAC Policy [pending]
### Dependencies: None
### Description: Define and implement the database models for audits, audit stages/statuses, and audit assignments. Establish a clear RBAC (Role-Based Access Control) policy for all audit-related operations.
### Details:
Create or update ORM models for Audit, AuditStage, AuditStatus, and AuditAssignment. Define user roles (Auditor, Manager, Admin) and map permissions for each tRPC procedure. Ensure the models support linking audits to clients, tracking stages/statuses, and managing user assignments. Document the RBAC rules for reference in later subtasks.

## 2. Implement tRPC Procedures for Audit Creation and Stage/Status Updates [pending]
### Dependencies: 4.1
### Description: Develop tRPC procedures in auditRouter for creating audits and updating their stage/status, enforcing RBAC for each operation.
### Details:
Implement audit.create to accept clientId, auditYear, and initial stageId/statusId, ensuring only authorized roles can create audits. Implement audit.updateStageStatus to update an audit's stage and status, restricting access based on RBAC policy. Validate inputs and handle errors appropriately.

## 3. Implement tRPC Procedures for Audit Retrieval [pending]
### Dependencies: 4.1
### Description: Develop tRPC procedures to retrieve audit data: audit.getByClientId for client audit history and audit.getById for full audit details, including related tasks and assignments.
### Details:
Implement audit.getByClientId to fetch all audits for a given client, returning summary data. Implement audit.getById to fetch comprehensive audit details, including tasks and user assignments. Enforce RBAC so users only access audits they are permitted to view.

## 4. Implement tRPC Procedures for Audit Assignment Management [pending]
### Dependencies: 4.1
### Description: Develop audit.assignUser and audit.unassignUser procedures to manage AuditAssignment records, with strict RBAC enforcement.
### Details:
Implement audit.assignUser to assign users to audits and audit.unassignUser to remove assignments. Validate user roles and permissions for these operations. Ensure assignment changes are logged for auditability.

## 5. Integrate Monitoring, Logging, and RBAC Enforcement Across Procedures [pending]
### Dependencies: 4.2, 4.3, 4.4
### Description: Add comprehensive monitoring and logging to all auditRouter procedures, ensuring RBAC checks are consistently enforced and all sensitive actions are auditable.
### Details:
Integrate logging for all create, update, assignment, and retrieval actions, including user IDs, timestamps, and operation details. Set up monitoring for key metrics (e.g., request rates, errors). Review all procedures to confirm RBAC is enforced at entry points and that unauthorized access is prevented and logged.

