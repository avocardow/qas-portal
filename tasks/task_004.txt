# Task ID: 4
# Title: Implement Status Filtering
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Add default Active filter and Show All toggle for Admin users
# Details:
1. Modify api.clients.getAll.useQuery to accept statusFilter parameter
2. Set default filter to status === 'active'
3. Create a UI toggle for 'Show All' that's only visible to Admin users
4. When toggled, include 'prospect' and 'archived' statuses in the query
5. Use useRbac() to determine if user has Admin privileges
6. Ensure filter state persists during pagination
7. Add visual indicator when 'Show All' is active

# Test Strategy:
Test default filter shows only active clients. Verify Admin users can see and toggle 'Show All'. Confirm non-Admin users don't see the toggle. Check that filter state persists during pagination.

# Subtasks:
## 1. Modify API Client Query to Accept Status Filter Parameter [pending]
### Dependencies: None
### Description: Update the existing api.clients.getAll.useQuery hook to accept a statusFilter parameter that will filter clients by their status.
### Details:
1. Locate the api.clients.getAll.useQuery implementation
2. Add a statusFilter parameter to the query function
3. Modify the API endpoint URL construction to include the status filter parameter when present
4. Update the query key to include the statusFilter value to ensure proper cache invalidation
5. Add TypeScript types for the new parameter if applicable
6. Test the modified query with different status values
7. Ensure backward compatibility for existing usages of the hook

## 2. Implement Default Active Status Filter Logic [pending]
### Dependencies: 4.1
### Description: Set up the default filtering logic to only show clients with 'active' status when no filter is explicitly specified.
### Details:
1. Create a useState hook to manage the filter state with 'active' as the default value
2. Update the query call to pass the current filter state
3. Implement the filter logic in the API call to filter by 'active' status by default
4. Add unit tests to verify the default filter behavior
5. Ensure the filter is applied consistently across component re-renders
6. Verify that the initial data load correctly applies the 'active' filter
7. Add appropriate loading states during filter transitions

## 3. Create Role-Based Access Control for Filter Visibility [pending]
### Dependencies: 4.2
### Description: Implement logic to determine if a user has Admin privileges using the useRbac() hook, which will control the visibility of the 'Show All' toggle.
### Details:
1. Import and implement the useRbac() hook to check for admin privileges
2. Create a function to determine if the current user has admin access
3. Set up a React context if needed to make the admin status available throughout the component tree
4. Add unit tests to verify the RBAC logic works correctly
5. Implement conditional rendering based on admin status
6. Ensure the RBAC check is performant and doesn't cause unnecessary re-renders
7. Add appropriate error handling for RBAC failures

## 4. Develop Show All Toggle UI Component [pending]
### Dependencies: 4.3
### Description: Create a toggle UI component that allows Admin users to switch between viewing only active clients and viewing all clients including those with 'prospect' and 'archived' statuses.
### Details:
1. Design a toggle switch component using appropriate UI library (e.g., Material-UI Switch)
2. Implement the toggle with clear labeling ('Show All')
3. Style the toggle to be visually distinct and accessible
4. Add appropriate ARIA attributes for accessibility
5. Implement conditional rendering to only show the toggle to admin users
6. Add hover tooltips to explain the toggle functionality
7. Ensure the toggle state is visually clear (e.g., different colors for on/off states)

## 5. Implement Multi-Status Filter Logic [pending]
### Dependencies: 4.2, 4.4
### Description: Develop the logic to include 'prospect' and 'archived' statuses in the query when the 'Show All' toggle is activated by an Admin user.
### Details:
1. Modify the filter state to handle multiple status values
2. Update the API query to accept an array of statuses when 'Show All' is active
3. Implement the logic to include 'prospect' and 'archived' statuses when the toggle is on
4. Add appropriate type checking for the status array
5. Optimize the query to handle multiple statuses efficiently
6. Test the filter with various combinations of statuses
7. Ensure the UI updates correctly when switching between filtered and unfiltered views

## 6. Add Visual Indicator for Active Filters [pending]
### Dependencies: 4.4, 4.5
### Description: Implement a visual indicator that clearly shows when the 'Show All' filter is active, helping users understand which clients are currently being displayed.
### Details:
1. Design a visual indicator component (e.g., badge, highlight, or text label)
2. Implement the indicator to appear when 'Show All' is active
3. Style the indicator to be noticeable but not distracting
4. Add animations for state transitions (e.g., fade in/out when filter changes)
5. Ensure the indicator is accessible (proper contrast, screen reader support)
6. Add a count of total items being displayed with the current filter
7. Test the indicator across different screen sizes and ensure it's responsive

## 7. Implement Filter State Persistence During Pagination [pending]
### Dependencies: 4.5, 4.6
### Description: Ensure that the selected filter state persists when users navigate between pages of results, maintaining a consistent view of the data.
### Details:
1. Modify the pagination logic to include the current filter state
2. Update the query key structure to incorporate both pagination and filter parameters
3. Implement state management to preserve filter settings during navigation
4. Add URL query parameters to maintain filter state on page refresh
5. Test pagination with different filter combinations
6. Optimize data fetching to minimize redundant requests when only changing pages
7. Ensure the visual indicator remains consistent during pagination

