# Task ID: 3
# Title: Refactor Hook Usage
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Replace all useRbac() and usePermission() hook calls with useAbility() throughout the codebase.
# Details:
Using the inventory from Task 1, systematically replace each hook usage following the pattern: const { role, canAccess } = useRbac(); â†’ const { can } = useAbility();. Update all permission checks to use the new can() function with the appropriate permission strings from permissionSchema. Ensure all permission strings match those defined in the schema. Start with smaller, isolated components before moving to more complex pages.

# Test Strategy:
For each component refactored, manually test with different user roles to verify permission checks still work correctly. Write unit tests for critical components that use useAbility() to ensure they render correctly based on permissions.

# Subtasks:
## 1. Inventory and Planning [pending]
### Dependencies: None
### Description: Review the inventory from Task 1 and identify all components and pages that use the useRbac() and usePermission() hooks. Plan the replacement strategy based on component complexity and usage frequency.
### Details:
Use the inventory to prioritize components based on their complexity and how frequently they are used. Start with smaller, isolated components to ensure a smooth transition.

## 2. Update Permission Schema [pending]
### Dependencies: 3.1
### Description: Ensure the permissionSchema is up-to-date and includes all necessary permission strings. Verify that each permission string is correctly defined and matches the intended functionality.
### Details:
Review and update the permissionSchema to include all permissions used in the application. This step is crucial for ensuring that the new can() function works correctly.

## 3. Replace Hooks in Small Components [pending]
### Dependencies: 3.2
### Description: Begin replacing useRbac() and usePermission() hooks with useAbility() in smaller, isolated components. Update permission checks to use the new can() function with appropriate permission strings.
### Details:
Start with simple components to test the replacement process and ensure it works as expected before moving to more complex components.

## 4. Implement can() Function Checks [pending]
### Dependencies: 3.3
### Description: Update all permission checks to use the can() function from the useAbility() hook. Ensure that each check uses the correct permission strings from the updated permissionSchema.
### Details:
Replace conditional statements that check permissions with calls to the can() function. For example, replace `if (role === 'admin')` with `if (can('admin:manage'))`.

## 5. Refactor Complex Components and Pages [pending]
### Dependencies: 3.4
### Description: Once the process is verified in smaller components, apply the same changes to more complex components and pages. Ensure that all useRbac() and usePermission() calls are replaced.
### Details:
Expand the replacement to more complex components and pages, ensuring that all hook calls are updated and permission checks are correctly implemented.

## 6. Testing and Verification [pending]
### Dependencies: 3.5
### Description: Conduct thorough testing of the refactored components and pages to ensure that the new hook usage works correctly and does not introduce any bugs or security vulnerabilities.
### Details:
Perform unit tests, integration tests, and UI tests to verify that the replacement of hooks does not affect the functionality or security of the application.

## 7. Final Review and Deployment [pending]
### Dependencies: 3.6
### Description: Review the entire codebase to ensure all useRbac() and usePermission() hooks have been replaced. Deploy the updated codebase to production after successful testing.
### Details:
Conduct a final review to confirm that all hook replacements are complete and correct. Deploy the updated application to production once verified.

