# Task ID: 3
# Title: Define Prisma schema for client data
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create or update the Prisma schema to support client data migration from CSV.
# Details:
Update `schema.prisma` to include models for:
- Clients (name, address, status, etc.)
- Contacts (name, email, phone, client relationship)
- Licenses (type, number, expiration date, client relationship)
- Trust accounts (account number, balance, client relationship)
- Audits (initial placeholder for future development)

Ensure proper relationships between models. Use Context7 to fetch official Prisma documentation for schema design best practices.

# Test Strategy:
Run `npx prisma validate` to verify schema correctness. Generate and apply migrations to the development Supabase instance with `npx prisma migrate dev`. Verify tables are created correctly in Supabase.

# Subtasks:
## 1. Analyze and Document Client Data Requirements [pending]
### Dependencies: None
### Description: Review the CSV migration requirements and document all necessary fields and relationships for Clients, Contacts, Licenses, Trust Accounts, and Audits.
### Details:
List all fields for each model (e.g., Clients: name, address, status; Contacts: name, email, phone, clientId, etc.). Identify required data types, constraints, and how each entity relates to others (e.g., one-to-many between Clients and Contacts). Ensure the schema will support all data needed for migration and future extensibility.

## 2. Design Prisma Models and Relationships [pending]
### Dependencies: 3.1
### Description: Draft the Prisma models for Clients, Contacts, Licenses, Trust Accounts, and Audits, specifying all fields and defining relationships according to best practices.
### Details:
Use singular, PascalCase model names and camelCase field names for clarity and convention compliance[4]. Define one-to-many and one-to-one relationships as appropriate (e.g., a Client has many Contacts, Licenses, and Trust Accounts). Include placeholder fields for the Audits model for future development. Reference official Prisma documentation for relationship syntax and best practices[2][4].

## 3. Implement and Annotate schema.prisma File [pending]
### Dependencies: 3.2
### Description: Update or create the `schema.prisma` file with the defined models, fields, and relationships, including comments for clarity and maintainability.
### Details:
Translate the model designs into Prisma Schema Language, ensuring all relationships and field types are correctly specified[2][3]. Add comments to explain model purposes, relationships, and any placeholder fields. Use environment variables for data source configuration if needed[2].

## 4. Validate Schema and Generate Migration [pending]
### Dependencies: 3.3
### Description: Run Prisma validation tools and generate a migration to ensure the schema is syntactically correct and ready for database application.
### Details:
Use `prisma validate` to check for schema errors and `prisma migrate dev` to generate and apply the migration to a development database[2][3]. Address any validation or migration issues, ensuring all relationships and constraints are enforced as intended.

## 5. Review Schema for Best Practices and Future Extensibility [pending]
### Dependencies: 3.4
### Description: Perform a final review of the schema for naming conventions, indexing, and extensibility, making adjustments as needed for maintainability and performance.
### Details:
Check that model and field names follow Prisma and JavaScript conventions[4]. Ensure indexes are added to frequently queried fields and foreign keys for performance[4][5]. Confirm that placeholder models (e.g., Audits) are clearly marked for future development. Document any design decisions or areas for future improvement.

