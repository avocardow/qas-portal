# Task ID: 2
# Title: Implement Related Entity Management Backend
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Create tRPC procedures for Contacts, Licenses, and Trust Accounts CRUD operations
# Details:
Implement direct tRPC procedures for contact.create/update, license.create/update, and trustAccount.create/update with proper Zod validation schemas. Each procedure should accept the parent clientId and the entity data. Ensure RBAC enforcement (Admin/Manager only) for all write operations. Consider implementing batch operations if needed for efficiency.

# Test Strategy:
Test each procedure with valid and invalid inputs, verify proper relationship creation with parent Client records, and confirm RBAC enforcement prevents unauthorized access.

# Subtasks:
## 1. Define Zod Validation Schemas for Entities [done]
### Dependencies: None
### Description: Create Zod schemas for Contacts, Licenses, and Trust Accounts to validate incoming data for create and update operations.
### Details:
Implement Zod object schemas for each entity, ensuring all required fields are present and correctly typed. Include validation for parent clientId and entity-specific fields. These schemas will be used to validate input in tRPC procedures.[2][5]

## 2. Implement RBAC Middleware for tRPC Procedures [done]
### Dependencies: 2.1
### Description: Develop a reusable middleware to enforce Admin/Manager role-based access control for all write operations.
### Details:
Create a tRPC middleware that checks the user's role from the context and restricts access to create and update procedures unless the user is an Admin or Manager. Integrate this middleware into the relevant procedures to ensure security.[4]

## 3. Develop tRPC CRUD Procedures for Contacts, Licenses, and Trust Accounts [done]
### Dependencies: 2.1, 2.2
### Description: Implement create and update tRPC procedures for each entity, using the defined Zod schemas and RBAC middleware.
### Details:
For each entity, define tRPC mutation procedures (contact.create, contact.update, license.create, license.update, trustAccount.create, trustAccount.update). Each procedure should accept parent clientId and entity data, validate input with Zod, and enforce RBAC via middleware. Use your ORM (e.g., Prisma) to interact with the database.[2][5]

## 4. Implement Batch Operations for Efficiency [in-progress]
### Dependencies: 2.3
### Description: Add batch create and update procedures for each entity to handle multiple records in a single request.
### Details:
Define tRPC procedures (e.g., contact.batchCreate, license.batchUpdate) that accept arrays of entity data and clientIds. Use Zod array validation and ensure RBAC enforcement. Optimize database interactions for bulk operations to improve performance.

## 5. Write Unit and Integration Tests for Procedures and Middleware [pending]
### Dependencies: 2.4
### Description: Create comprehensive tests to verify validation, RBAC enforcement, and correct CRUD/batch operations for all entities.
### Details:
Write tests covering valid and invalid inputs, unauthorized access, and successful/failed CRUD and batch operations. Ensure all edge cases are handled and that procedures behave as expected under different user roles and data scenarios.

