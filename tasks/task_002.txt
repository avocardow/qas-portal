# Task ID: 2
# Title: Define Column Configuration and Data Formatting
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Create column definitions for the Clients table with proper data formatting
# Details:
1. Define columns array with the following fields:
   - Client Name (client.clientName)
   - Primary Contact (derived from contacts where isPrimary === true)
   - City (client.city)
   - Next Contact Date (client.nextContactDate) formatted as locale date
   - Audit Month End (convert client.auditMonthEnd integer to month name using Intl.DateTimeFormat)
   - Fees (client.estAnnFees) - conditionally visible for Admin role
   - Status (client.status) - conditionally visible for Admin role
2. Use date-fns or Intl.DateTimeFormat for date formatting
3. Implement logic to derive primary contact name from contacts array
4. Add conditional rendering based on user role using useRbac()

# Test Strategy:
Unit test the column definitions and formatters. Verify date formatting works correctly across locales. Test conditional visibility logic with different user roles.

# Subtasks:
## 1. Define Base Columns Array Structure [done]
### Dependencies: None
### Description: Set up the initial columns array for the Clients table, specifying each column's field, header, and accessor logic.
### Details:
Create a columns array with objects for each required field: Client Name, Primary Contact, City, Next Contact Date, Audit Month End, Fees, and Status. For each column, specify the field or accessor function as appropriate. Use accessor functions for derived or formatted fields (e.g., Primary Contact).

## 2. Implement Primary Contact Derivation Logic [done]
### Dependencies: 2.1
### Description: Add logic to extract the primary contact's name from the contacts array for each client.
### Details:
For the Primary Contact column, implement an accessor function that searches the contacts array for the object where isPrimary is true and returns the contact's name. Ensure this logic is robust to missing or malformed data.

## 3. Format Date Fields Using date-fns or Intl.DateTimeFormat [done]
### Dependencies: 2.1
### Description: Apply locale-aware formatting to the Next Contact Date column using date-fns or Intl.DateTimeFormat.
### Details:
For the Next Contact Date column, use a value formatter or accessor function to convert the raw date into a locale-formatted string. Use date-fns's format function or Intl.DateTimeFormat for consistent date display across locales.

## 4. Convert Audit Month End Integer to Month Name [done]
### Dependencies: 2.1
### Description: Transform the auditMonthEnd integer into a month name using Intl.DateTimeFormat.
### Details:
For the Audit Month End column, implement a value formatter or accessor that takes the integer (1-12), creates a Date object, and formats it to display the full month name using Intl.DateTimeFormat.

## 5. Add Conditional Rendering for Fees and Status Columns Based on User Role [pending]
### Dependencies: 2.1
### Description: Implement logic to show or hide the Fees and Status columns depending on whether the user has the Admin role.
### Details:
Integrate useRbac() or equivalent RBAC logic to determine the user's role. Conditionally include the Fees and Status columns in the columns array only if the user is an Admin.

## 6. Apply Value Formatters for Fees and Status Columns [pending]
### Dependencies: 2.5
### Description: Format the Fees column as currency and apply any necessary formatting to the Status column.
### Details:
For the Fees column, use a value formatter to display the value as currency (e.g., using Intl.NumberFormat or a custom formatter). For the Status column, apply any required formatting or mapping to display user-friendly status labels.

