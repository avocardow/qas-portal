# Task ID: 2
# Title: Update Provider Configuration
# Status: done
# Dependencies: 1
# Priority: high
# Description: Remove RbacProvider and ensure PermissionProvider properly wraps the application in the providers.tsx file.
# Details:
Locate src/app/(pages)/(dashboard)/providers.tsx and remove the <RbacProvider> component. Ensure <PermissionProvider> is present and wraps all children components. Verify the provider has access to the user context and any other dependencies it needs. If PermissionProvider is not already present, add it following the pattern in the technical architecture section. Ensure it's positioned correctly in the provider hierarchy.

# Test Strategy:
Test the application startup to ensure no provider-related errors occur. Verify that basic permission checks still function after the provider swap by testing a few key pages with different user roles.

# Subtasks:
## 1. Locate and Open providers.tsx File [done]
### Dependencies: None
### Description: Find the providers.tsx file located at src/app/(pages)/(dashboard)/providers.tsx and open it in your code editor.
### Details:
Use your file system or IDE to navigate to the specified path and open the file for editing.

## 2. Remove RbacProvider Component [done]
### Dependencies: 2.1
### Description: Delete the <RbacProvider> component from the providers.tsx file.
### Details:
Search for the <RbacProvider> component in the file and remove it entirely, ensuring no references remain.

## 3. Verify Presence of PermissionProvider [done]
### Dependencies: 2.2
### Description: Check if the <PermissionProvider> component is already present in the providers.tsx file.
### Details:
Look for the <PermissionProvider> component in the file. If it exists, proceed to the next step. If not, prepare to add it.

## 4. Add PermissionProvider if Necessary [done]
### Dependencies: 2.3
### Description: If the <PermissionProvider> component is not present, add it to the providers.tsx file following the pattern outlined in the technical architecture section.
### Details:
Refer to the technical architecture documentation for the correct implementation pattern. Ensure it wraps all children components correctly.

## 5. Position PermissionProvider Correctly [done]
### Dependencies: 2.4
### Description: Ensure the <PermissionProvider> component is positioned correctly in the provider hierarchy.
### Details:
Verify that <PermissionProvider> is placed in the correct order relative to other providers, ensuring it has access to the user context and any other necessary dependencies.

## 6. Verify Provider Configuration [done]
### Dependencies: 2.5
### Description: Test the application to ensure the <PermissionProvider> is functioning as expected and has access to the user context and other dependencies.
### Details:
Run the application and perform tests to verify that the <PermissionProvider> is correctly wrapping components and handling permissions as intended.

