# Task ID: 2
# Title: Implement Client Data Fetching
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Set up tRPC call to api.clients.getById with all required Prisma relations to fetch comprehensive client data.
# Details:
Implement the tRPC call to api.clients.getById({ clientId }) with all necessary Prisma relations: contacts, licenses, trustAccounts, audits, activityLogs, documentReferences, and assignedUser (client manager). Follow Next.js App Router data fetching guidelines from Context7. Implement error handling and loading states. Ensure all client and related entity fields are loaded to allow for later refinement.

# Test Strategy:
Test with mock data to ensure all relations are properly loaded. Verify error states and loading indicators work correctly. Check that all required fields are available in the returned data.

# Subtasks:
## 1. Define Prisma client schema relations [done]
### Dependencies: None
### Description: Set up the Prisma schema to properly define all required relations for the client entity
### Details:
Review the existing Prisma schema and ensure all relations are properly defined between the client entity and its related entities: contacts, licenses, trustAccounts, audits, activityLogs, documentReferences, and assignedUser. Make sure relation fields are correctly typed and that foreign keys are properly set up. This will serve as the foundation for fetching comprehensive client data with all necessary relations.

## 2. Create tRPC procedure for client fetching [done]
### Dependencies: 2.1
### Description: Implement the tRPC procedure that will handle fetching client data by ID with all relations
### Details:
Create a new tRPC procedure in the clients router called 'getById' that accepts a clientId parameter. Inside this procedure, use Prisma's findUnique or findFirst method with the include option to specify all the required relations: contacts, licenses, trustAccounts, audits, activityLogs, documentReferences, and assignedUser. Implement proper error handling for cases where the client doesn't exist or database errors occur. Return a properly typed response that includes the client and all its relations.

## 3. Implement server-side data fetching component [done]
### Dependencies: 2.2
### Description: Create a server component that fetches client data using the tRPC procedure
### Details:
Following Next.js App Router patterns, create a React Server Component that will handle fetching the client data. Use the tRPC server-side calling pattern to directly invoke the api.clients.getById procedure with the clientId parameter. Implement proper error handling and ensure the component can be easily composed with other components. This approach leverages server components to keep expensive data fetches on the server, improving performance and security.

## 4. Create loading and error states [done]
### Dependencies: 2.3
### Description: Implement loading states and error handling UI components
### Details:
Create reusable loading and error state components that will be displayed during data fetching and when errors occur. For loading states, implement a skeleton UI that matches the layout of the client data display. For error states, create informative error messages that help users understand what went wrong (e.g., client not found, permission issues, or server errors). Use Next.js App Router's loading.js and error.js conventions to handle these states elegantly.

## 5. Implement client-side data fetching hook [done]
### Dependencies: 2.2
### Description: Create a custom hook for client components that need to fetch client data
### Details:
For client components that need to fetch or refetch client data, create a custom React hook (e.g., useClientData) that uses tRPC's client-side calling pattern. Implement this using SWR or React Query for efficient caching and revalidation. The hook should accept a clientId parameter and return the client data along with loading and error states. This will complement the server-side fetching while providing a way to update data on the client when needed.

## 6. Create data display components with progressive loading [in-progress]
### Dependencies: 2.3, 2.4, 2.5
### Description: Implement UI components that display client data with progressive loading of related entities
### Details:
Create UI components that display the client data and all its relations. Implement these using a progressive loading approach where the main client data loads first, followed by related entities. This improves perceived performance. Ensure all fields from the client and related entities are accessible in the UI components, even if not all are displayed initially. This will allow for later refinement of the UI without requiring changes to the data fetching logic. Use React Suspense boundaries to optimize the loading experience.

