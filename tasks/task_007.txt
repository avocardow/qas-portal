# Task ID: 7
# Title: Implement Task Management Frontend
# Status: pending
# Dependencies: 5, 6
# Priority: medium
# Description: Create Task List, Detail, and Create/Edit UI components
# Details:
Develop: 1) Task List page (/tasks) with functional table defaulting to task.getAssignedToMe, Admin toggle for task.getAll, pagination, sorting, filtering, and 'Add New Task' button. 2) Audit Detail Tasks Section listing tasks via task.getByAuditId with quick status updates and 'Add Task' functionality. 3) Task Create/Edit forms with fields for Name, Description, Assignee, Due Date, Status, Priority. 4) Task Detail View (modal) displaying full task details. Use Tailwind and Shadcn UI / TailAdmin components for consistent styling.

# Test Strategy:
Manually test all UI components and interactions. Verify data fetching, filtering, sorting, and pagination. Test task creation, assignment, and status updates. Confirm role-based UI element visibility.

# Subtasks:
## 1. Set Up Task Data Integration and Role-Based Logic [pending]
### Dependencies: None
### Description: Implement data fetching and state management for tasks, including role-based logic for displaying assigned vs. all tasks.
### Details:
Integrate with backend endpoints (e.g., task.getAssignedToMe, task.getAll, task.getByAuditId). Set up state management (React context, Redux, or local state) to store and update task data. Implement logic to determine user role (admin vs. regular user) and toggle between assigned and all tasks accordingly.

## 2. Develop Task List Page with Table, Pagination, Sorting, and Filtering [pending]
### Dependencies: 7.1
### Description: Create the /tasks page with a functional table displaying tasks, including pagination, sorting, filtering, and an 'Add New Task' button.
### Details:
Use Tailwind and Shadcn UI / TailAdmin components to build a responsive table. Implement pagination controls, column sorting, and filtering options. Add an 'Add New Task' button that opens the create task form. Ensure the table defaults to assigned tasks and supports admin toggle for all tasks.

## 3. Implement Task Create/Edit Forms [pending]
### Dependencies: 7.1
### Description: Build reusable forms for creating and editing tasks, supporting fields for Name, Description, Assignee, Due Date, Status, and Priority.
### Details:
Design forms using Tailwind and Shadcn UI / TailAdmin form components. Implement validation and controlled inputs for all required fields. Ensure the form can be used both for creating new tasks and editing existing ones, with appropriate data pre-filling and submission handling.

## 4. Build Task Detail View Modal [pending]
### Dependencies: 7.2
### Description: Create a modal component to display full task details, accessible from the task list and audit detail sections.
### Details:
Use modal components from Shadcn UI / TailAdmin. Display all task fields in a readable layout. Ensure the modal can be triggered from the task list and audit detail sections, and supports closing and navigation back to the list.

## 5. Develop Audit Detail Tasks Section with Quick Status Updates [pending]
### Dependencies: 7.1, 7.3, 7.4
### Description: Implement the audit detail section listing tasks by audit ID, supporting quick status updates and 'Add Task' functionality.
### Details:
Fetch and display tasks using task.getByAuditId. Allow inline status updates (e.g., dropdown or toggle). Integrate the 'Add Task' button to open the create form. Ensure consistent styling and UX with other components.

