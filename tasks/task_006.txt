# Task ID: 6
# Title: Refactor Backend Permission Middleware
# Status: in-progress
# Dependencies: 3
# Priority: medium
# Description: Update the enforcePermission middleware to use the new policy engine for consistent frontend and backend permission checks.
# Details:
1. Refactor `src/middleware/enforcePermission.ts`
2. Initialize the permission library with the same policies used in the frontend
3. Update the middleware to use the library's checking methods
4. Ensure proper error responses when permissions are denied
5. Update TRPC middleware to use the new enforcement logic
6. Add logging for permission denials
7. Maintain backward compatibility during migration

# Test Strategy:
Write unit tests for the middleware that verify it correctly allows or denies requests based on user roles. Test with various endpoints and permission scenarios.

# Subtasks:
## 1. Integrate New Policy Engine into Backend [done]
### Dependencies: None
### Description: Install and configure the new policy engine library in the backend codebase to ensure it matches the version and configuration used in the frontend.
### Details:
Add the policy engine as a dependency in the backend project. Initialize it with the same policy definitions as the frontend, ensuring consistency in permission logic across both environments.

## 2. Refactor enforcePermission Middleware to Use Policy Engine [in-progress]
### Dependencies: 6.1
### Description: Update the existing enforcePermission middleware to utilize the new policy engine for permission checks instead of the legacy logic.
### Details:
Replace the old permission checking code in src/middleware/enforcePermission.ts with calls to the policy engine's checking methods. Ensure the middleware retrieves user context and requested action/resource, then delegates permission evaluation to the policy engine.

## 3. Implement Consistent Error Handling for Permission Denials [pending]
### Dependencies: 6.2
### Description: Ensure that when permission checks fail, the middleware returns standardized error responses that align with frontend expectations.
### Details:
Define and return clear HTTP error codes (e.g., 403 Forbidden) and structured error messages when permissions are denied. Ensure error responses are consistent with frontend handling and include relevant details for debugging.

## 4. Update TRPC Middleware to Use New Enforcement Logic [pending]
### Dependencies: 6.2
### Description: Modify the TRPC middleware layer to invoke the refactored enforcePermission middleware, ensuring all API endpoints are protected by the new policy engine.
### Details:
Replace any direct permission checks or legacy enforcement logic in TRPC middleware with calls to the updated enforcePermission middleware. Test that all routes requiring permissions are correctly guarded.

## 5. Add Logging for Permission Denials [pending]
### Dependencies: 6.3
### Description: Implement logging within the middleware to record details of permission denials for auditing and debugging purposes.
### Details:
Integrate a logging solution (e.g., Winston, Bunyan) to capture user identity, requested action, resource, and reason for denial whenever a permission check fails. Ensure logs are structured and do not expose sensitive information.

## 6. Maintain Backward Compatibility During Migration [pending]
### Dependencies: 6.2
### Description: Ensure that the migration to the new policy engine does not break existing functionality by supporting legacy permission checks where necessary.
### Details:
Implement a fallback mechanism in the middleware to use the old permission logic for routes or features not yet migrated to the new policy engine. Gradually phase out legacy checks as all endpoints are updated.

