# Task ID: 6
# Title: Implement Task Management Backend
# Status: done
# Dependencies: 4
# Priority: high
# Description: Create tRPC procedures in taskRouter for Task CRUD operations with RBAC
# Details:
Implement the following tRPC procedures in taskRouter: 1) task.getByAuditId, 2) task.getAssignedToMe with pagination, sorting, filtering, 3) task.getAll (Admin view) with pagination, sorting, filtering, 4) task.create, 5) task.update, 6) task.delete. Each procedure should enforce appropriate RBAC based on user roles. Tasks should support fields like Name, Description, Assignee, Due Date, Status, and Priority.

# Test Strategy:
Write unit tests for each procedure verifying correct data manipulation, filtering, pagination, and RBAC enforcement. Test task assignment and reassignment functionality.

# Subtasks:
## 1. Define Task Schema and Database Models [done]
### Dependencies: None
### Description: Create TypeScript interfaces and Prisma/database models for the Task entity with all required fields
### Details:
Create a Task schema with fields: id, name, description, assigneeId, auditId, dueDate, status, priority, createdAt, and updatedAt. Define TypeScript interfaces for Task entity and related input/output types. Set up Prisma model or equivalent database schema for Task entity with appropriate relations to User and Audit entities. Implement validation schemas using Zod or similar validation library for task creation and updates. Define enums for Status and Priority fields with appropriate values.

## 2. Implement RBAC Middleware for Task Procedures [done]
### Dependencies: 6.1
### Description: Create middleware to handle role-based access control for all task procedures
### Details:
Create a middleware function using tRPC's middleware pattern that validates user permissions based on their role. Define permission rules for different task operations: admins can perform all operations, managers can create/update/view tasks, regular users can only view assigned tasks and update their status. Implement context-based authorization by extending the tRPC context to include user role information. Create helper functions to check if a user has access to specific tasks based on assignment and role. Ensure the middleware can be reused across all task procedures.

## 3. Implement Basic Task Retrieval Procedures [done]
### Dependencies: 6.1, 6.2
### Description: Create tRPC procedures for task.getByAuditId and task.getAssignedToMe with pagination
### Details:
Implement the task.getByAuditId procedure that accepts an auditId parameter and returns all tasks associated with that audit. Apply RBAC to ensure only users with access to the audit can view its tasks. Implement task.getAssignedToMe procedure that returns tasks assigned to the current user with pagination support. Add input validation for pagination parameters (page, limit). Implement sorting functionality allowing tasks to be sorted by dueDate, priority, or status. Add filtering options to filter tasks by status or priority. Ensure both procedures use the RBAC middleware to enforce access control.

## 4. Implement Admin Task View Procedure [done]
### Dependencies: 6.2, 6.3
### Description: Create task.getAll procedure with advanced querying capabilities for administrators
### Details:
Implement task.getAll procedure that returns all tasks in the system with strict admin-only access control. Add comprehensive pagination support with cursor-based pagination for better performance. Implement advanced filtering options including by assignee, date ranges, multiple statuses, and priorities. Add sorting capabilities on all relevant fields with both ascending and descending options. Include search functionality to search across task names and descriptions. Implement count and aggregation features to show task distribution by status, priority, or assignee. Ensure proper error handling for invalid query parameters.

## 5. Implement Task Creation and Update Procedures [done]
### Dependencies: 6.1, 6.2
### Description: Create tRPC procedures for task.create and task.update with proper validation
### Details:
Implement task.create procedure that accepts task details and creates a new task in the database. Add input validation using Zod schemas to ensure all required fields are provided and valid. Implement task.update procedure that allows updating task fields while preserving immutable fields. Add validation to ensure users can only update tasks they're authorized to modify based on RBAC rules. Implement business logic for task assignment, including notifications or events when tasks are created or assigned. Add audit logging to track task creation and modifications. Ensure proper error handling for validation failures and database errors.

## 6. Implement Task Deletion and Final Integration [done]
### Dependencies: 6.2, 6.5
### Description: Create task.delete procedure and integrate all procedures into the main router
### Details:
Implement task.delete procedure with strict permission checks (typically admin-only or task creator). Add safeguards against accidental deletion, such as confirmation parameters. Implement soft deletion if needed to preserve task history. Integrate all task procedures into the main taskRouter. Register the taskRouter with the main tRPC router. Add comprehensive error handling across all procedures. Write integration tests for all task procedures to verify functionality and RBAC enforcement. Document the API endpoints, including required permissions, input parameters, and response formats. Perform final testing to ensure all procedures work together correctly.

