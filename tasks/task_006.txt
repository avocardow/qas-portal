# Task ID: 6
# Title: Build Current Audit Section
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create the Current Audit section showing audit details with edit functionality.
# Details:
1. Implement `useQuery('audits.getCurrent')` to fetch latest audit data
2. Create a card to display Next Contact Date, Audit Period-End Date, Audit Stage, Audit Status, and Staff Assigned
3. Add edit button to open a modal form
4. Build form using TailAdmin components
5. Connect to `useMutation('audits.createOrUpdate')` for saving changes
6. Handle case where no current audit exists with option to create one

# Test Strategy:
Verify audit data displays correctly. Test edit functionality and confirm data updates after edits. Test creating a new audit when none exists.

# Subtasks:
## 1. Implement Current Audit Data Fetching and State Management [pending]
### Dependencies: None
### Description: Set up the data fetching logic using React Query to retrieve the current audit information and implement the state management structure to handle audit data, loading states, and error handling.
### Details:
1. Create a custom hook `useCurrentAudit` that implements `useQuery('audits.getCurrent')` to fetch the latest audit data
2. Handle loading, error, and empty states within the hook
3. Implement proper TypeScript interfaces for audit data structure (including Next Contact Date, Audit Period-End Date, Audit Stage, Audit Status, and Staff Assigned fields)
4. Add a function to check if an audit exists and provide appropriate default values
5. Set up proper caching and refetching strategies in React Query
6. Implement test cases using React Testing Library to verify data fetching behavior
7. Add error boundaries to gracefully handle API failures

## 2. Build Current Audit Display Card Component [pending]
### Dependencies: 6.1
### Description: Create a responsive card component that displays the current audit information in a clear, organized manner following best practices for data presentation and accessibility.
### Details:
1. Design and implement a TailAdmin card component to display audit information
2. Create formatted displays for each audit field (Next Contact Date, Audit Period-End Date, Audit Stage, Audit Status, and Staff Assigned)
3. Implement proper date formatting using a library like date-fns
4. Add conditional rendering for different audit statuses with appropriate visual indicators
5. Implement a placeholder state for when no current audit exists
6. Ensure the component is fully responsive across device sizes
7. Add accessibility attributes (aria-labels, proper heading hierarchy)
8. Include an edit button that will trigger the edit modal
9. Write unit tests to verify the component renders correctly with different data scenarios

## 3. Develop Edit Audit Modal Form [pending]
### Dependencies: 6.1, 6.2
### Description: Create a modal form component that allows users to edit the current audit details or create a new audit if none exists, with proper validation and user feedback.
### Details:
1. Build a modal component using TailAdmin components that opens when the edit button is clicked
2. Implement form fields for all audit properties with appropriate input types
3. Add form validation using a form library (React Hook Form recommended based on research)
4. Create date picker components for date fields with proper formatting
5. Implement dropdown selectors for Audit Stage and Status with predefined options
6. Add staff assignment field with user search/selection capability
7. Include proper error messaging and field validation
8. Implement conditional logic to show different form fields based on audit stage
9. Add cancel and save buttons with appropriate confirmation dialogs
10. Ensure the form is accessible with keyboard navigation and screen reader support
11. Write tests for form validation and submission behavior

## 4. Implement Audit Creation/Update Functionality with Error Handling [pending]
### Dependencies: 6.1, 6.2, 6.3
### Description: Connect the edit form to the backend API using React Query mutations, implement proper error handling, success notifications, and handle the special case of creating a new audit when none exists.
### Details:
1. Implement `useMutation('audits.createOrUpdate')` hook to handle saving changes to the server
2. Add optimistic updates to immediately reflect changes in the UI
3. Implement proper error handling with user-friendly error messages
4. Add success notifications when an audit is successfully created or updated
5. Create a special flow for when no current audit exists, with a button to create a new one
6. Implement audit history tracking to maintain a record of changes
7. Add confirmation dialogs for important actions
8. Ensure proper RBAC (Role-Based Access Control) is respected for edit permissions
9. Implement form state persistence in case of accidental navigation
10. Add loading indicators during submission
11. Write integration tests to verify the complete create/update flow
12. Implement proper invalidation of queries to ensure data consistency

