# Task ID: 6
# Title: Implement SharePoint Folder Linking
# Status: pending
# Dependencies: 3
# Priority: high
# Description: Create an automated script and manual UI for linking Client records to their corresponding SharePoint folders, enabling document access within the portal.
# Details:
1. Create `scripts/linkSharepointFolders.ts` to automatically match clients with SharePoint folders by name
2. Create tRPC `sharepointRouter` with procedures: `listClientFolders`, `getFolderContents`
3. Add `client.updateSharepointFolderId` procedure with Admin/Manager RBAC
4. Implement "Link/Change SharePoint Folder" button on Client Detail page for Admin/Managers
5. Create folder selection modal using `sharepoint.listClientFolders`
6. Add document display component on Client Detail page that shows contents of linked folder
7. Implement "Open in Web" links for documents using SharePoint webUrl

# Test Strategy:
1. Verify automated script correctly links clients to SharePoint folders
2. Test manual linking UI for Admin/Manager users
3. Confirm document list displays correctly for linked folders
4. Validate "Open in Web" links open documents in SharePoint
5. Test RBAC for folder linking functionality

# Subtasks:
## 1. Develop Automated Script for Clientâ€“SharePoint Folder Matching [pending]
### Dependencies: None
### Description: Create a TypeScript script (`scripts/linkSharepointFolders.ts`) that automatically matches client records to SharePoint folders by name and stores the folder ID in the client record.
### Details:
Implement logic to fetch client records and available SharePoint folders, perform name-based matching, and update each client with the corresponding SharePoint folder ID. Ensure error handling for unmatched or duplicate folders.

## 2. Implement tRPC SharePoint Router for Folder Listing and Contents [pending]
### Dependencies: 6.1
### Description: Create a tRPC router (`sharepointRouter`) with procedures to list client folders (`listClientFolders`) and retrieve folder contents (`getFolderContents`).
### Details:
Integrate with SharePoint API to fetch folder lists and their contents. Support pagination, filtering, and sorting as needed. Ensure proper error handling and data shaping for frontend consumption.

## 3. Add Client Folder Linking Procedure with RBAC Controls [pending]
### Dependencies: 6.2
### Description: Implement a tRPC procedure (`client.updateSharepointFolderId`) that allows Admins and Managers to manually link or update a client's SharePoint folder ID.
### Details:
Enforce role-based access control (RBAC) so only Admins/Managers can perform this action. Validate folder existence before updating the client record.

## 4. Create UI for Linking/Changing SharePoint Folder on Client Detail Page [pending]
### Dependencies: 6.3
### Description: Add a 'Link/Change SharePoint Folder' button to the Client Detail page, visible to Admins/Managers, which opens a modal for folder selection.
### Details:
Conditionally render the button based on user role. Trigger a modal that uses the `sharepoint.listClientFolders` procedure to display available folders for selection.

## 5. Build Folder Selection Modal and Document Display Component [pending]
### Dependencies: 6.4
### Description: Develop a modal for selecting a SharePoint folder and a component to display the contents of the linked folder on the Client Detail page.
### Details:
The modal should allow searching and selecting from available folders. The document display component should use `sharepoint.getFolderContents` to show files and folders, including 'Open in Web' links using SharePoint's webUrl.

## 6. Integrate and Test End-to-End SharePoint Folder Linking Workflow [pending]
### Dependencies: 6.5
### Description: Test the full workflow: automated and manual linking, folder selection, document display, and access controls. Fix integration issues and ensure a seamless user experience.
### Details:
Perform end-to-end testing with different user roles. Validate that folder links, document listings, and web URLs function correctly. Address any UI/UX or backend issues discovered during testing.

