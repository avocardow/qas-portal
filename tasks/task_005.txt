# Task ID: 5
# Title: Implement Audit Tracking Frontend
# Status: in-progress
# Dependencies: 3, 4
# Priority: medium
# Description: Create Audit UI components for Client Detail and Audit Detail pages
# Details:
Develop: 1) Client Detail Audits Tab showing audit list (using audit.getByClientId) with Year, Stage, Status, Due Date, Assigned Staff columns, 'Add New Audit Year' button, and Stage/Status dropdowns for audit.updateStageStatus. 2) Audit Detail page (/audits/[auditId]) displaying audit details, assigned team members with add/remove controls, and related tasks. Use Tailwind and Shadcn UI / TailAdmin components for consistent styling.

# Test Strategy:
Manually test all UI components and interactions. Verify data fetching, display of audit history, stage/status updates, and team member assignment functionality. Test role-based UI element visibility.

# Subtasks:
## 1. Design Audit UI Components and Page Layouts [done]
### Dependencies: None
### Description: Create wireframes and component structures for the Client Detail Audits Tab and the Audit Detail page, ensuring alignment with Tailwind and Shadcn UI / TailAdmin design systems.
### Details:
Define the layout for the audits tab within the Client Detail page, including table columns (Year, Stage, Status, Due Date, Assigned Staff), 'Add New Audit Year' button, and dropdowns for Stage/Status. For the Audit Detail page, outline sections for audit details, assigned team members with add/remove controls, and related tasks. Use Figma or a similar tool for mockups and document component hierarchies.

<info added on 2025-04-22T03:22:25.298Z>
- Ensure Tailwind CSS v4 is installed and configured to leverage its new features, such as the @theme directive and CSS-native theming, which enhances maintainability and performance for Shadcn UI components[2][5].
- When integrating Shadcn UI components, utilize Tailwind v4’s CSS variable-based theming to align with TailAdmin’s design tokens and support dynamic theming across the audit UI[5].
- For dropdowns (Stage/Status), use Shadcn UI’s <Select> component styled with Tailwind classes, ensuring accessibility and consistent appearance with the rest of the dashboard[1][2].
- Document the component hierarchy in Figma, mapping each UI element (e.g., AuditList table, Add New Audit Year button, inline dropdowns) to its corresponding React component and Tailwind utility classes for developer reference.
- In the Audit Detail page, use Shadcn UI’s <Card>, <Tabs>, and <Avatar> components for sections like audit metadata, team member management, and related tasks, ensuring modularity and reusability.
- For team member add/remove controls, implement Shadcn UI’s <Button> and <Popover> components, styled with Tailwind, to provide intuitive user interactions.
- Reference TailAdmin’s layout patterns for responsive grid and spacing utilities, ensuring the audit pages are mobile-friendly and visually consistent with the rest of the admin dashboard[4].
</info added on 2025-04-22T03:22:25.298Z>

## 2. Implement Client Detail Audits Tab Table and Controls [done]
### Dependencies: 5.1
### Description: Develop the audits table UI for the Client Detail page, integrating data fetching and interactive controls for audit management.
### Details:
Build a responsive table using Tailwind and Shadcn UI / TailAdmin components. Fetch audit data using audit.getByClientId. Implement columns for Year, Stage, Status, Due Date, and Assigned Staff. Add the 'Add New Audit Year' button with modal or inline form functionality. Integrate Stage/Status dropdowns that trigger audit.updateStageStatus on change.

## 3. Develop Audit Detail Page with Team and Task Management [in-progress]
### Dependencies: 5.1
### Description: Create the Audit Detail page at /audits/[auditId], displaying audit information and enabling management of assigned team members and related tasks.
### Details:
Use Tailwind and Shadcn UI / TailAdmin components to present audit details. Implement a section for assigned team members with add/remove controls (e.g., multi-select dropdown or list with remove buttons). Display related tasks in a list or table. Ensure all data is fetched and updated via appropriate API endpoints.

## 4. Integrate API Calls and State Management [pending]
### Dependencies: 5.2, 5.3
### Description: Connect UI components to backend APIs for data retrieval and updates, managing local and global state as needed.
### Details:
Wire up audit.getByClientId for the audits tab and relevant endpoints for audit details, team assignment, and task management. Use React Query, Redux, or context/state hooks for efficient state management and UI updates. Handle optimistic updates for status/stage changes and team modifications.

## 5. Implement Role-Based Access and Final Styling Consistency [pending]
### Dependencies: 5.4
### Description: Apply role-based controls to restrict actions (e.g., editing, assignment) and ensure all UI elements follow consistent styling guidelines.
### Details:
Check user roles/permissions before rendering or enabling controls such as status updates, team assignment, and adding new audits. Refine all components to match Tailwind and Shadcn UI / TailAdmin standards for spacing, typography, and responsiveness. Conduct a UI review to ensure visual and functional consistency across both pages.

