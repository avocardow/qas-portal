# Task ID: 5
# Title: Build Recent Contacts Table
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Create the Recent Contacts Table on the Client Profile page with all required fields and primary badge indicators.
# Details:
Implement a TailAdmin RecentOrders-style table for contacts with columns: Name (linked to /contacts/[id]), Email, Phone, Title, and Primary badge. Display multiple licenses per contact in a clean format (comma-separated or expandable cell). Use DataTableTwo component as referenced in Context7. Ensure table is responsive and accessible.

# Test Strategy:
Test table rendering with various data scenarios. Verify links to contact pages work correctly. Check that primary badges display properly. Test multiple licenses display format.

# Subtasks:
## 1. Set up DataTableTwo component structure [pending]
### Dependencies: None
### Description: Create the foundation for the Recent Contacts table by implementing the DataTableTwo component with proper configuration
### Details:
Import and configure the DataTableTwo component from the TailAdmin template. Create a new component file for RecentContacts that extends DataTableTwo. Set up the basic table structure with responsive design considerations and accessibility attributes (aria labels, keyboard navigation). Implement the container layout with appropriate TailAdmin styling classes.

## 2. Define table columns and data structure [pending]
### Dependencies: 5.1
### Description: Define the column configuration for Name, Email, Phone, Title, and Primary badge
### Details:
Create a columns configuration array that defines each column's properties (Name, Email, Phone, Title, Primary). For the Name column, implement linking to '/contacts/[id]' pattern. Set up proper data accessors for each field. Configure sorting capabilities for relevant columns. Define the data interface/type for contact entries to ensure type safety throughout the component.

## 3. Implement Primary badge indicator [pending]
### Dependencies: 5.2
### Description: Create the visual indicator for Primary contacts with appropriate styling
### Details:
Design and implement the Primary badge component with appropriate styling (colors, size, text). Create a cell renderer function for the Primary column that conditionally displays the badge based on the contact's primary status. Add tooltip or accessible description to explain the badge meaning. Ensure the badge has proper contrast ratios for accessibility.

## 4. Develop multiple licenses display format [pending]
### Dependencies: 5.2
### Description: Implement the display logic for showing multiple licenses per contact
### Details:
Create a custom cell renderer for displaying multiple licenses. Implement either a comma-separated list for simple display or an expandable cell with a count indicator that reveals all licenses on interaction. For the expandable approach, implement the expand/collapse functionality with appropriate animations. Ensure the display remains readable even with many licenses by implementing truncation with tooltips if needed.

## 5. Connect table to data source [pending]
### Dependencies: 5.2, 5.3, 5.4
### Description: Implement data fetching and state management for the contacts table
### Details:
Set up API integration to fetch contact data from the backend. Implement loading states and error handling for data fetching. Create state management for the table data using React hooks (useState, useEffect). Implement pagination logic if the data set is large. Add sorting functionality based on column headers. Ensure proper data transformation from API response to the table's expected format.

## 6. Implement responsive behavior [pending]
### Dependencies: 5.1, 5.2, 5.3, 5.4
### Description: Ensure the table displays correctly across all device sizes
### Details:
Test and optimize the table for various screen sizes. Implement column priority hiding for smaller screens (hide less important columns first). Add horizontal scrolling for very small screens while maintaining fixed position of key columns. Ensure touch interactions work properly on mobile devices. Test and fix any layout issues that occur at different breakpoints.

## 7. Add accessibility features and final polish [pending]
### Dependencies: 5.1, 5.2, 5.3, 5.4, 5.5, 5.6
### Description: Enhance the table with proper accessibility features and final UI refinements
### Details:
Implement proper keyboard navigation throughout the table. Add screen reader announcements for dynamic content changes. Ensure all interactive elements have proper focus states. Add appropriate aria attributes for complex interactions. Implement final visual polish including hover states, transitions, and consistent spacing. Add comprehensive unit and integration tests to verify functionality. Document the component API and usage patterns for other developers.

