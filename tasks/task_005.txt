# Task ID: 5
# Title: Implement Archive Client Button
# Status: in-progress
# Dependencies: 2
# Priority: medium
# Description: Create the Archive Client button with permission checking and confirmation flow.
# Details:
1. Add Archive Client button with tertiary styling (low visual hierarchy)
2. Implement permission gating using `useAbility()` hook
3. Create confirmation modal using Headless UI Dialog
4. Connect to `useMutation('clients.update')` to set status to 'Archived'
5. Handle success and error states
6. Update UI after successful archiving

# Test Strategy:
Test permission gating to ensure only authorized users see the button. Verify confirmation flow works and client status updates correctly after archiving.

# Subtasks:
## 1. Implement Permission-Gated Archive Button UI Component [done]
### Dependencies: None
### Description: Create a tertiary-styled Archive Client button component that is only visible to users with appropriate permissions. This component will be the entry point for the archiving flow.
### Details:
1. Create a new React component `ArchiveClientButton.tsx` with tertiary styling for low visual hierarchy
2. Implement permission checking using the `useAbility()` hook to verify the user has 'archive:client' permissions
3. Add conditional rendering logic to hide the button completely when permissions are missing
4. Include a disabled state with tooltip for cases where archiving might be temporarily unavailable
5. Add appropriate icon (archive/box) and label
6. Implement click handler that will trigger the confirmation modal
7. Test the component with different permission scenarios using mock data
8. Ensure the button follows accessibility guidelines with proper ARIA attributes and keyboard navigation

## 2. Build Confirmation Modal with Description Field [in-progress]
### Dependencies: 5.1
### Description: Create a confirmation dialog using Headless UI that explains the archiving process, requests confirmation, and allows users to add an optional description for the archive.
### Details:
1. Implement a modal dialog using Headless UI Dialog component
2. Create a clear title and explanation of what archiving means for the client data
3. Add a text field for archive description with appropriate validation
4. Include warning about the consequences of archiving
5. Add Cancel and Confirm buttons with appropriate styling
6. Implement state management for the modal visibility and form inputs
7. Add loading state for the Confirm button during the archiving process
8. Ensure the modal is keyboard accessible and follows WAI-ARIA best practices
9. Test the modal with screen readers and keyboard navigation
10. Add appropriate animations for modal opening/closing

## 3. Implement Archive Mutation and Success/Error Handling [pending]
### Dependencies: 5.1, 5.2
### Description: Connect the confirmation flow to the backend using the useMutation hook, handle success and error states, and update the UI after successful archiving.
### Details:
1. Implement `useMutation('clients.update')` hook to connect to the backend API
2. Create a mutation function that sends the client ID and archive description to the API
3. Set the client status to 'Archived' in the mutation payload
4. Implement comprehensive error handling with specific error messages for different failure scenarios
5. Add success feedback with a toast notification or inline message
6. Update the client list UI after successful archiving (remove from list or update status)
7. Implement optimistic updates for better user experience
8. Add logging for successful archiving and failures for audit purposes
9. Implement retry logic for transient failures
10. Test the full flow from button click to UI update with various scenarios (success, network error, permission error, etc.)

