# Task ID: 5
# Title: Remove Legacy RBAC Code
# Status: in-progress
# Dependencies: 3, 4
# Priority: low
# Description: Delete the RbacContext and related policy files after confirming all usages have been migrated.
# Details:
After confirming all components have been migrated to the new system, delete src/context/RbacContext.tsx and any related policy files. Remove any imports of these files throughout the codebase. Check for any remaining references to the old system using grep or similar tools. Update any documentation that references the old RBAC system to point to the new PermissionContext/useAbility approach.

# Test Strategy:
Run the full test suite to ensure no regressions. Perform a full application smoke test with various user roles to verify all permission checks still function correctly. Check build logs for any warnings or errors related to missing imports.

# Subtasks:
## 1. Audit Legacy RBAC Usage [done]
### Dependencies: None
### Description: Perform a comprehensive audit of the codebase to identify all components that use the legacy RbacContext and related policy files.
### Details:
Use grep or similar tools to search for all imports and references to RbacContext.tsx and related policy files. Create a detailed inventory listing all files, components, and functions that use the legacy RBAC system. Document each usage pattern and its purpose to ensure complete migration verification. Command examples: `grep -r "import.*RbacContext" --include="*.tsx" --include="*.ts" ./src`, `grep -r "useContext.*RbacContext" --include="*.tsx" --include="*.ts" ./src`. Store results in a spreadsheet or document for tracking migration status.

<info added on 2025-04-29T19:49:49.909Z>
Based on the findings from the audit, here's additional information to add to the subtask details:

The audit has revealed specific locations of legacy RBAC usage:

1. **Core RBAC Components:**
   - Main context file: `src/context/RbacContext.tsx`
   - RbacProvider implementations:
     - `src/app/(pages)/providers.tsx`
     - `src/app/(tailadmin)/(admin)/layout.tsx`

2. **Hook Usage Patterns:**
   - `useRbac` hook: Used in `src/components/header/ViewAsDropdown.tsx` for role-based UI rendering
   - `useRole` hook: Found in multiple components:
     - `src/components/email/EmailSidebar/EmailSidebar.tsx` (likely for permission-based feature toggling)
     - DataTableTwo component and associated tests (for conditional rendering of table actions)
     - Dashboard pages (possibly for metric visibility control)
     - Contacts pages (likely for CRUD operation permissions)

This mapping provides a clear picture of how RBAC hooks are distributed across the application, with particular concentration in UI components that require dynamic permission-based rendering. Focus migration efforts on these identified components, starting with the provider implementations.
</info added on 2025-04-29T19:49:49.909Z>

## 2. Verify Complete Migration to New Permission System [in-progress]
### Dependencies: 5.1
### Description: Confirm that all previously identified usages of the legacy RBAC system have been properly migrated to the new PermissionContext/useAbility approach.
### Details:
Using the inventory created in subtask 1, systematically check each component to verify it has been migrated to the new permission system. Create test cases for each permission scenario to ensure functionality is preserved. Implement unit and integration tests that verify the new permission checks work correctly. Document any edge cases or special handling required. For each migrated component, add a comment indicating the migration is complete with a reference to the relevant test case.

<info added on 2025-04-29T19:50:30.522Z>
To address the incomplete migration issue:

1. Run a comprehensive codebase scan using:
   ```bash
   grep -r "useRbac\|useRole\|RbacProvider" --include="*.{js,jsx,ts,tsx}" ./src
   ```

2. Create a migration tracking spreadsheet with columns:
   - Component path
   - Legacy imports found
   - Migration status
   - Test coverage status
   - Migration PR link

3. For each component still using legacy RBAC:
   - Map the existing permission checks to equivalent useAbility calls
   - Verify permission context is properly provided in component hierarchy
   - Test both positive and negative permission scenarios

4. Common migration patterns to watch for:
   - Replace `useRole('admin')` with `useAbility('can', 'manage', 'all')`
   - Replace `useRbac.can('edit', 'users')` with `useAbility('can', 'edit', 'users')`
   - Replace RbacProvider with appropriate PermissionContext providers

5. Add regression tests specifically targeting permission boundaries that may have changed during migration.

6. Implement a CI check that fails if legacy RBAC imports are detected in new code.
</info added on 2025-04-29T19:50:30.522Z>

## 3. Create Backup of Legacy RBAC Code [pending]
### Dependencies: 5.1, 5.2
### Description: Create a backup of all legacy RBAC code before deletion to ensure recovery is possible if needed.
### Details:
Create a separate branch in the version control system to preserve the legacy code. Additionally, export all relevant files (RbacContext.tsx and related policy files) to a separate archive. Document the structure and relationships between these files for future reference. Include comments about any non-obvious behaviors or implementation details that might be relevant for troubleshooting during the transition period. Store this backup in a designated location accessible to the development team.

## 4. Remove RbacContext.tsx and Policy Files [in-progress]
### Dependencies: 5.2, 5.3
### Description: Delete the RbacContext.tsx file and all related policy files from the codebase after confirming they are no longer needed.
### Details:
Identify all policy files related to the legacy RBAC system. Delete src/context/RbacContext.tsx and all identified policy files. Ensure that any test files specifically for these components are also removed. Update any build configurations or module maps that might reference these files. Commit these changes with a clear message indicating the removal of legacy RBAC code as part of the migration to the new permission system.

## 5. Clean Up Imports and References [pending]
### Dependencies: 5.4
### Description: Remove all imports and references to the deleted RBAC files throughout the codebase.
### Details:
Use IDE tools or grep to find all remaining imports of RbacContext and policy files. Remove these imports and any associated code that is no longer needed. Check for any conditional logic that might be based on the old RBAC system and refactor as needed. Run linting tools to catch any unused variables or imports that might remain after removing references. Test the application to ensure no runtime errors occur due to missing imports.

## 6. Update Documentation [pending]
### Dependencies: 5.4, 5.5
### Description: Update all documentation that references the old RBAC system to point to the new PermissionContext/useAbility approach.
### Details:
Identify all documentation files (README.md, wiki pages, inline comments, etc.) that mention the legacy RBAC system. Update these documents to reference the new permission system instead. Include migration guides for developers who might be familiar with the old system. Add examples of how to use the new PermissionContext/useAbility approach for common permission scenarios. Create or update architecture diagrams to reflect the new permission system. Ensure API documentation is updated to reflect any changes in how permissions are checked.

## 7. Final Verification and Testing [pending]
### Dependencies: 5.5, 5.6
### Description: Perform comprehensive testing to ensure the application functions correctly after removing the legacy RBAC code.
### Details:
Run the full test suite to ensure no regressions have been introduced. Perform manual testing of all features that previously relied on the RBAC system. Verify that all permission checks are working as expected with the new system. Test edge cases such as users with multiple roles or special permissions. Monitor the application in a staging environment for any unexpected behaviors. Create a final report documenting the successful removal of the legacy RBAC system, including any lessons learned or recommendations for future similar migrations.

