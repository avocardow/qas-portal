# Task ID: 10
# Title: Create Upcoming Schedule Section
# Status: in-progress
# Dependencies: 2, 6
# Priority: low
# Description: Implement the Upcoming Schedule section showing next contact date and report due date.
# Details:
1. Extract Next Contact Date from client and audit records
2. Extract Report Due Date from relevant data sources
3. Create a simple, read-only list to display these dates
4. Format dates appropriately
5. Handle empty or null date values
6. Style as a small summary section

# Test Strategy:
Verify dates display correctly and format properly. Test handling of missing or null date values.

# Subtasks:
## 1. Implement Data Retrieval and Processing for Schedule Dates [done]
### Dependencies: None
### Description: Create the backend functionality to extract, process, and format the Next Contact Date and Report Due Date from client records and audit data sources.
### Details:
1. Create a ScheduleService class to handle data retrieval:
   - Implement methods to extract Next Contact Date from client records
   - Implement methods to extract Report Due Date from audit records
   - Add logic to handle null/empty date values with appropriate fallbacks
   - Implement date formatting using date-fns library for consistent display

2. Create API endpoints to serve schedule data:
   - Develop a GET endpoint that returns both contact and report dates
   - Implement proper error handling and response formatting
   - Add sorting to ensure dates are returned in chronological order
   - Include pagination support if multiple dates exist

3. Add data processing logic:
   - Implement status categorization (overdue, today, upcoming)
   - Add buffer time calculation for approaching deadlines
   - Create utility functions for date comparison and validation

4. Testing approach:
   - Write unit tests for the ScheduleService methods
   - Create integration tests for the API endpoints
   - Test edge cases like missing dates, past dates, and future dates

## 2. Build UI Component for Upcoming Schedule Display [in-progress]
### Dependencies: 10.1
### Description: Develop a responsive React component to display the schedule information in a clean, user-friendly format that highlights important dates and their status.
### Details:
1. Create the UpcomingSchedule React component:
   - Implement useState and useEffect hooks to manage schedule data
   - Add axios API call to fetch data from endpoints created in subtask 1
   - Implement loading states and error handling
   - Create conditional rendering for empty states

2. Design the schedule item display:
   - Create styled components for each schedule item
   - Implement visual indicators for different status types (overdue, today, upcoming)
   - Use date-fns to format dates consistently (e.g., 'MMM dd, yyyy')
   - Add tooltips for additional context on hover

3. Implement responsive design:
   - Ensure the component works well on both desktop and mobile
   - Use CSS Grid or Flexbox for layout
   - Add appropriate spacing and typography
   - Implement collapsible sections if needed

4. Add accessibility features:
   - Include proper ARIA attributes
   - Ensure keyboard navigation works correctly
   - Add screen reader-friendly text alternatives
   - Test with accessibility tools

5. Testing approach:
   - Write unit tests using React Testing Library
   - Test rendering with various data scenarios
   - Verify responsive behavior with different viewport sizes
   - Test accessibility compliance

