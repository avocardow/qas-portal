# Task ID: 10
# Title: Implement Permission Management Admin UI
# Status: in-progress
# Dependencies: 7
# Priority: low
# Description: Build admin screens for managing role-permission mappings in real-time.
# Details:
1. Create new pages for permission management in the admin section
2. Implement CRUD operations for role-permission mappings
3. Create a UI to assign/revoke permissions for each role
4. Add real-time updates using Supabase subscriptions if available
5. Implement validation to prevent invalid permission assignments
6. Add confirmation dialogs for potentially disruptive changes
7. Include search and filtering capabilities for large permission sets

# Test Strategy:
Create end-to-end tests that verify the admin UI correctly updates role-permission mappings in the database. Test that changes are immediately reflected in the application's permission behavior.

# Subtasks:
## 1. Design and Build Permission Management Admin UI Pages [done]
### Dependencies: None
### Description: Create new admin section pages dedicated to permission management, including layouts for listing roles, permissions, and their mappings.
### Details:
Develop the UI structure for permission management within the admin area. This includes pages for viewing all roles, all permissions, and a matrix or list showing current role-permission mappings. Incorporate search and filtering components to handle large permission sets. Ensure the UI is intuitive and scalable for future enhancements.

<info added on 2025-04-28T14:01:16.222Z>
For the Permission Management UI implementation:

Create a modular structure with the following components:

1. `src/app/(tailadmin)/(admin)/(others-pages)/permission-management/page.tsx` - Main container page using DashboardPlaceholderPageTemplate
2. `src/components/permission-management/` directory with:
   - `RolesList.tsx` - Displays all roles with search/filter capabilities
   - `PermissionsList.tsx` - Lists all permissions with categorization
   - `PermissionMatrix.tsx` - Interactive grid showing role-permission mappings
   - `RoleEditor.tsx` - Form for creating/editing roles
   - `PermissionAssignment.tsx` - Interface for assigning permissions to roles

Implement tab navigation between these views using the existing TabGroup component.

For the permission matrix, consider using a virtualized grid for performance with large datasets (react-window or similar library).

Include a confirmation modal for permission changes to prevent accidental modifications.

Store permission state using React Context to maintain consistency across components.

Example tab structure:
```tsx
<TabGroup>
  <TabList>
    <Tab>Roles</Tab>
    <Tab>Permissions</Tab>
    <Tab>Role-Permission Matrix</Tab>
  </TabList>
  <TabPanels>
    <TabPanel><RolesList /></TabPanel>
    <TabPanel><PermissionsList /></TabPanel>
    <TabPanel><PermissionMatrix /></TabPanel>
  </TabPanels>
</TabGroup>
```
</info added on 2025-04-28T14:01:16.222Z>

## 2. Implement CRUD Operations for Role-Permission Mappings [in-progress]
### Dependencies: 10.1
### Description: Develop backend and frontend logic to create, read, update, and delete role-permission mappings, ensuring data integrity and validation.
### Details:
Set up API endpoints and database models for managing role-permission associations. Integrate these endpoints with the admin UI to allow admins to add, modify, or remove mappings. Implement validation logic to prevent invalid or conflicting permission assignments, and ensure changes are reflected accurately in the UI.

<info added on 2025-04-28T14:19:32.469Z>
For implementing the TRPC router for role-permission mappings:

```typescript
// src/server/api/routers/rolePermission.ts
import { z } from "zod";
import { createTRPCRouter, permissionProcedure } from "../trpc";
import { ROLE_PERMISSION_PERMISSIONS } from "~/constants/permissions";

export const rolePermissionRouter = createTRPCRouter({
  getAll: permissionProcedure(ROLE_PERMISSION_PERMISSIONS.READ)
    .query(async ({ ctx }) => {
      return ctx.db.rolePermission.findMany({
        include: { role: true, permission: true },
      });
    }),
    
  assign: permissionProcedure(ROLE_PERMISSION_PERMISSIONS.CREATE)
    .input(z.object({
      roleId: z.string(),
      permissionId: z.string(),
    }))
    .mutation(async ({ ctx, input }) => {
      return ctx.db.rolePermission.create({
        data: {
          roleId: input.roleId,
          permissionId: input.permissionId,
        },
      });
    }),
    
  unassign: permissionProcedure(ROLE_PERMISSION_PERMISSIONS.DELETE)
    .input(z.object({
      roleId: z.string(),
      permissionId: z.string(),
    }))
    .mutation(async ({ ctx, input }) => {
      return ctx.db.rolePermission.delete({
        where: {
          roleId_permissionId: {
            roleId: input.roleId,
            permissionId: input.permissionId,
          },
        },
      });
    }),
});

// Update src/server/api/root.ts
// Add: rolePermission: rolePermissionRouter,

// Add to src/constants/permissions.ts
export const ROLE_PERMISSION_PERMISSIONS = {
  CREATE: "role_permission.create",
  READ: "role_permission.read",
  UPDATE: "role_permission.update",
  DELETE: "role_permission.delete",
} as const;
```

Include validation in the assign procedure to check for existing mappings and role/permission validity before creating new associations.
</info added on 2025-04-28T14:19:32.469Z>

## 3. Enable Real-Time Updates and Confirmation Dialogs [done]
### Dependencies: 10.2
### Description: Integrate Supabase subscriptions (or equivalent) for real-time updates and add confirmation dialogs for disruptive changes.
### Details:
Utilize Supabase's real-time features to subscribe to changes in role-permission mappings, updating the UI instantly when changes occur. Implement confirmation dialogs for actions that could have significant impact, such as revoking critical permissions or deleting mappings, to prevent accidental disruptions.

## 4. Develop Permission Assignment and Revocation UI with Validation [pending]
### Dependencies: 10.3
### Description: Build interactive UI components for assigning and revoking permissions per role, with robust validation and user feedback.
### Details:
Create interfaces (e.g., checklists, toggles, or drag-and-drop) for admins to assign or revoke permissions for each role. Integrate validation to prevent invalid assignments (such as conflicting or duplicate permissions) and provide clear feedback or error messages. Ensure the UI leverages real-time updates and confirmation dialogs for a seamless admin experience.

