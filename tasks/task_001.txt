# Task ID: 1
# Title: Implement Personal Email Integration
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Create the backend and frontend components for integrating personal M365 email accounts into the portal, allowing users to view, send, and reply to emails.
# Details:
1. Create tRPC `emailRouter` with procedures: `listFolders`, `listMessages`, `getMessage`, `sendMessage`, `createReply`, `createForward`
2. Configure Graph API permissions: `Mail.ReadWrite`, `Mail.Send`
3. Implement 3-column layout UI at `/email` route with folder list, message list, and message detail components
4. Add pagination controls for message list
5. Create compose/reply/forward modals with form validation
6. Ensure HTML email body is sanitized before rendering
7. Add loading states and error handling

# Test Strategy:
1. Verify all email procedures return expected data
2. Test pagination functionality with large mailboxes
3. Confirm emails can be composed, sent, replied to, and forwarded
4. Validate HTML sanitization prevents XSS
5. Test error handling for network issues and permission problems

# Subtasks:
## 1. Configure Microsoft Graph API Authentication [done]
### Dependencies: None
### Description: Verify Mail.ReadWrite and Mail.Send delegated permissions and implement a reusable GraphClient utility class
### Details:
Confirm the Azure AD app registration includes Mail.ReadWrite and Mail.Send delegated permissions. Implement a GraphClient class to perform authenticated Graph API calls using the existing Phase 0 OAuth flow, handling token acquisition and refresh. Ensure the utility is strongly typed and reusable across email service methods.

## 2. Implement Email Service and tRPC Router [done]
### Dependencies: 1.1
### Description: Create the backend service layer and tRPC router with all required email procedures
### Details:
Create an EmailService class that interfaces with Microsoft Graph API to perform email operations. Implement methods for listing folders, fetching messages, getting message details, sending messages, and creating replies/forwards. Create the tRPC emailRouter with the following procedures: listFolders, listMessages, getMessage, sendMessage, createReply, and createForward. Implement server-side pagination for message lists. Add input validation using Zod schemas for all procedures. Implement proper error handling with meaningful error messages. Add HTML sanitization for email body content using a library like DOMPurify.

## 3. Create Email Folder and Message List Components [done]
### Dependencies: 1.2
### Description: Implement the first two columns of the 3-column layout: folder navigation and message list
### Details:
Create a responsive layout for the /email route with a sidebar for folders and a main content area for messages. Implement the FolderList component that fetches and displays email folders from the tRPC listFolders procedure. Add folder selection functionality that triggers message list updates. Create the MessageList component that displays messages from the selected folder using the tRPC listMessages procedure. Implement pagination controls with options for page size and navigation. Add sorting functionality for messages by date, sender, or subject. Implement loading states and error handling for both components. Add a search/filter functionality for the message list.

## 4. Implement Message Detail Component [pending]
### Dependencies: 1.3
### Description: Create the third column component for displaying the full content of selected emails
### Details:
Create the MessageDetail component that fetches and displays the full content of a selected email using the tRPC getMessage procedure. Implement HTML sanitization on the client side before rendering email content. Display email headers (From, To, CC, Subject, Date) in a structured format. Show email attachments with download options. Add buttons for reply, reply all, and forward actions. Implement loading states and error handling. Create a mechanism to handle and display inline images securely. Add functionality to mark messages as read when opened.

## 5. Develop Email Composition Components [in-progress]
### Dependencies: 1.4
### Description: Create modals for composing new emails, replying to emails, and forwarding emails
### Details:
Create a ComposeMail modal component with form fields for recipient, cc, bcc, subject, and body. Implement a rich text editor for the email body using a library like TinyMCE or Quill. Add file attachment functionality with size limits and type validation. Create ReplyMail and ForwardMail components that pre-populate fields based on the original email. Implement form validation for all required fields and email format validation. Add draft saving functionality to prevent data loss. Implement the send functionality using the tRPC sendMessage procedure. Add loading states during sending and success/error notifications.

## 6. Implement Testing and Finalize Integration [pending]
### Dependencies: 1.2, 1.3, 1.4, 1.5
### Description: Create comprehensive tests and finalize the email integration with proper error handling and performance optimizations
### Details:
Write unit tests for the EmailService class and all tRPC procedures. Create integration tests for the complete email flow from authentication to sending. Implement end-to-end tests for the UI components. Add error boundary components to gracefully handle runtime errors. Implement proper loading states throughout the application. Optimize performance by implementing virtualized lists for large mailboxes. Add telemetry and logging for monitoring email operations. Create documentation for the email integration features. Perform security review to ensure proper handling of sensitive email data. Implement feature flags to control rollout of the email functionality.

