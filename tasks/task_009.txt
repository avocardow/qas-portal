# Task ID: 9
# Title: Update Table and UI Components
# Status: pending
# Dependencies: 4, 5
# Priority: medium
# Description: Refactor client tables and action buttons to respect the new permission system.
# Details:
1. Update `ClientsPage.tsx` to show/hide admin-only columns based on permissions
2. Wrap the "New Client" button with the `<Authorized>` component
3. Update any other action buttons with appropriate permission checks
4. Implement graceful fallback states for missing permissions
5. Ensure responsive design is maintained when elements are hidden
6. Test with different user roles to verify correct visibility

# Test Strategy:
Write component tests that verify tables and buttons are correctly shown or hidden based on user permissions. Test with all defined user roles to ensure correct behavior.

# Subtasks:
## 1. Refactor Client Table Columns for Permission-Based Visibility [pending]
### Dependencies: None
### Description: Update the ClientsPage.tsx table to show or hide admin-only columns based on the current user's permissions.
### Details:
Identify which columns are admin-only. Use the new permission system to conditionally render these columns. Ensure that hiding columns does not break table layout or responsiveness. Test with different permission sets to confirm correct column visibility.

## 2. Wrap Action Buttons with Permission Checks [pending]
### Dependencies: 9.1
### Description: Update all action buttons, including the 'New Client' button, to enforce permission checks using the <Authorized> component or equivalent logic.
### Details:
Locate all action buttons on ClientsPage.tsx and related components. Wrap each button with the <Authorized> component, specifying the required permission. Ensure that buttons are hidden or disabled for users lacking the necessary permissions, and that the UI remains consistent.

## 3. Implement Graceful Fallback States for Restricted Actions [pending]
### Dependencies: 9.2
### Description: Provide user-friendly fallback UI for cases where users lack permissions, such as empty states, tooltips, or messages explaining restricted access.
### Details:
For each restricted action or hidden element, add fallback UI elements (e.g., tooltips, banners, or placeholder text) to inform users why features are unavailable. Ensure these states are accessible and maintain the overall responsive design.

## 4. Test and Validate Permission-Based UI with Multiple User Roles [pending]
### Dependencies: 9.3
### Description: Thoroughly test the updated table and UI components with various user roles to verify correct permission enforcement and responsive behavior.
### Details:
Create or use test accounts with different permission levels (e.g., admin, standard user, restricted user). Validate that columns and buttons appear or are hidden as expected. Check that fallback states render properly and that the UI remains responsive across devices and screen sizes.

