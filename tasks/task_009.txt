# Task ID: 9
# Title: Build Tabbed Activity Log
# Status: pending
# Dependencies: 8
# Priority: medium
# Description: Implement a tabbed interface on the Client Profile page for activity logs grouped by type with filter and search functionality.
# Details:
Create a tabbed interface using HeadlessUI Tabs (referenced in Context7) with groups for 'Notes', 'Emails', 'Calls', and 'Status Changes'. Implement full-text filter on activity content and a date-range picker in the log section. Ensure proper loading states and empty states for each tab.

# Test Strategy:
Test tab switching functionality. Verify filtering works correctly for text and date ranges. Test with various activity data sets. Check accessibility of the tabbed interface.

# Subtasks:
## 1. Implement Tabbed Interface for Activity Log Types [pending]
### Dependencies: None
### Description: Set up the tabbed UI for activity logs grouped by 'Notes', 'Emails', 'Calls', and 'Status Changes' using HeadlessUI Tabs in a React project.
### Details:
Install @headlessui/react and Tailwind CSS if not already present. Use HeadlessUI's Tab.Group, Tab.List, Tab, Tab.Panels, and Tab.Panel components to create four tabs, each representing a log type. Ensure accessibility and keyboard navigation are supported as per HeadlessUI standards. Each Tab.Panel should render a placeholder for its respective log content. Style the tabs using Tailwind CSS for visual clarity and responsiveness.[1][2][5]

## 2. Add Filter, Search, and Date-Range Picker Functionality [pending]
### Dependencies: 9.1
### Description: Integrate a full-text search filter and a date-range picker within the log section of each tab to allow users to filter activity logs by content and date.
### Details:
Within each Tab.Panel, implement a search input that filters the displayed logs based on user-entered text. Add a date-range picker component (using a suitable library or custom implementation) to filter logs by selected date range. Ensure that both filters work in combination and update the displayed logs in real-time. Place the filter controls prominently above the log list in each tab.

## 3. Implement Loading and Empty States for Each Tab [pending]
### Dependencies: 9.2
### Description: Ensure each tab displays appropriate loading indicators while fetching data and clear empty states when no logs match the current filters.
### Details:
For each Tab.Panel, manage loading state (e.g., show a spinner or skeleton UI) while log data is being fetched or filtered. When no logs are available after applying filters or on initial load, display a user-friendly empty state message. Ensure these states are visually distinct and accessible, and that transitions between states are smooth.

