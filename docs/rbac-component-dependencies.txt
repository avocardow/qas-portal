---
This document previously listed legacy RBAC component dependencies. The legacy RbacContext and related policy files have been removed.
---

# New Permission System

We now use a unified permission system based on the `PermissionContext` and the `useAbility` hook.

**Importing the Hook**
```typescript
import { useAbility } from '@/hooks/useAbility';
```

**Using `can(permission)`**
```typescript
const { can } = useAbility();
if (can('task.create')) {
  // Render create task UI
}
```

**Authorized Wrapper**
Use the `<Authorized>` component for conditional rendering:
```tsx
<Authorized action="task.update" fallback={<div>Not allowed</div>}>
  <UpdateTaskForm />
</Authorized>
```

For more details, see [cursor_rules.mdc](mdc:.cursor/rules/useAbility.mdc) and the `useAbility` docs in `src/hooks/useAbility.ts`.
