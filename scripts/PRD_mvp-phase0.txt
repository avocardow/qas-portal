<context>
# QAS Portal - Core Infrastructure Setup (MVP Phase 0) - Updated

## 1. Introduction

### 1.1 Purpose
To define the requirements for setting up the core application infrastructure for the QLD Audit Specialists (QAS) Portal MVP (Internal Showcase version). This foundational phase prepares the project codebase for subsequent development of specific feature UIs like Client and Task management.

### 1.2 Scope
This PRD covers the implementation and configuration of:
- Team Member Authentication using NextAuth.js with Microsoft 365.
- Database session storage and user management via the Prisma Adapter.
- tRPC API layer setup, including context creation with session and database access.
- Prisma Client initialization (singleton pattern) and integration.
- Basic Next.js App Router layout structure (root and protected) with route protection.
- Secure Environment Variable management for local development and deployment.
- Initial database seeding for essential lookup tables (Roles).
- Initial Admin user role assignment process.
- Confirmation of basic code quality tooling setup (ESLint, Prettier).

### 1.3 Out of Scope
This phase does *not* cover:
- Development of specific feature UI pages beyond one basic protected test page.
- Client Portal implementation or Client authentication.
- Implementation of specific tRPC CRUD procedures (only setup and context).
- Integration with external services beyond Microsoft 365 (e.g., Xero, SharePoint, DocuSign).
- Advanced features like automated tasks, notifications, messaging, reporting.
- Detailed error handling logic for specific application scenarios.

### 1.4 Context
The project uses Next.js (App Router), TypeScript, Tailwind CSS, Shadcn UI, Supabase (PostgreSQL), Prisma, tRPC, and NextAuth.js. The Prisma schema (`schema.prisma`) has been defined and migrated. This phase builds the necessary application layers on top of that foundation.

### 1.5 Guidelines
- **Cursor Rules:** Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) guidelines for rule structure and consistency.
- **Context7:** Refer to Context7-compatible official documentation for NextAuth.js, Prisma, tRPC, Next.js, and related libraries to inform implementation details and ensure best practices.
</context>

<PRD>
## 2. Goals
- Establish a working authentication flow for internal QAS Team Members via Microsoft 365.
- Implement secure session management stored in the database via Prisma.
- Set up a functional tRPC API endpoint, with reliable access to session data and the Prisma client within its context.
- Ensure type-safe access to the Supabase database through an initialized Prisma Client.
- Create a basic application shell (layout) that protects internal routes from unauthenticated access.
- Provide the foundational elements needed for Role-Based Access Control (RBAC) in future phases.
- Configure secure management of environment variables for local and deployed environments.
- Prepare the codebase structure in line with code quality standards for efficient feature development.

## 3. Specific Requirements

### 3.1 Environment Variable Management
#### 3.1.1 Local Setup
- Use a `.env.local` file to store sensitive credentials during local development.
- Ensure `.env.local` is included in `.gitignore`.

#### 3.1.2 Deployment Setup
- Configure required secrets as Environment Variables in Vercel project settings for production and staging.

#### 3.1.3 Required Variables
Ensure the following variables are defined and accessible where needed (server vs. public):
- `DATABASE_URL`
- `DIRECT_URL`
- `NEXTAUTH_URL`
- `NEXTAUTH_SECRET`
- `AZURE_AD_CLIENT_ID`
- `AZURE_AD_CLIENT_SECRET`
- `AZURE_AD_TENANT_ID`

### 3.2 Authentication (NextAuth.js)
#### 3.2.1 API Route
- Implement the NextAuth.js catch-all API route handler at `src/app/api/auth/[...nextauth]/route.ts`.

#### 3.2.2 Microsoft 365 Provider
- Configure the `AzureADProvider` (or `MicrosoftEntraIdProvider`) with OAuth scopes: `openid`, `profile`, `email`, `offline_access`.
- Use environment variables for client ID, secret, and tenant ID.

#### 3.2.3 Prisma Adapter
- Initialize and configure `@next-auth/prisma-adapter` linking to the Prisma Client.
- Ensure correct model mapping for users and sessions.

#### 3.2.4 Session Strategy
- Use NextAuth's "database" session strategy.

#### 3.2.5 Callbacks
- Implement the `session` callback to include `user.id` and `user.role` from the database via Prisma using `roleId`.

#### 3.2.6 Session Provider
- Wrap the root layout with the NextAuth `<SessionProvider>` in `src/app/layout.tsx`.

### 3.3 Database Connection (Prisma Client)
#### 3.3.1 Singleton Instance
- Create a Prisma Client singleton pattern file (e.g., `src/server/db.ts`) to ensure one instance across the server.

### 3.4 API Layer (tRPC)
#### 3.4.1 Server Setup
- Verify or create core tRPC server files: `src/server/api/trpc.ts`, `src/server/api/root.ts`.

#### 3.4.2 Context Creation (`createContext`)
- Define a context function that provides:
  - The Prisma Client instance (e.g., `db`).
  - The authenticated user's session (`session.user.id`, `session.user.role`) via NextAuth server helpers.

#### 3.4.3 Root Router (`appRouter`)
- Define `appRouter` with at least a basic health check procedure.

#### 3.4.4 API Handler
- Implement the Next.js API route handler for tRPC at `src/app/api/trpc/[trpc]/route.ts`.

#### 3.4.5 Client Provider
- Wrap the root layout with the tRPC client provider (`<api.Provider>`).

#### 3.4.6 Basic Error Handling
- Use `TRPCError` to define common error codes and handle error propagation.

### 3.5 Application Layout (Next.js App Router)
#### 3.5.1 Root Layout (`src/app/layout.tsx`)
- Include HTML structure and wrap content with global providers (SessionProvider, tRPC Provider).

#### 3.5.2 Protected Layout
- Create `src/app/(app)/layout.tsx` for authenticated routes with:
  - Sidebar/Header placeholders (using Shadcn UI or custom).
  - Redirect to `/signin` if unauthenticated.

#### 3.5.3 Basic Protected Page
- Add a placeholder page at `src/app/(app)/dashboard/page.tsx` to verify authentication and layout.

### 3.6 Initial Data & Configuration
#### 3.6.1 Role Seeding
- Implement a seed script (e.g., `prisma/seed.ts` or `package.json` script) to populate the `roles` table with: `Admin`, `Manager`, `Auditor`, `Staff`, `Client`.

#### 3.6.2 Initial Admin User
- Document the manual process to assign the `Admin` role (`roleId`) to the first designated Team Member after initial login.

### 3.7 Code Quality Tooling
#### 3.7.1 Confirmation
- Verify ESLint with Next.js/TypeScript rules and Prettier (with Tailwind plugin) are configured and run without critical errors.

## 4. Acceptance Criteria
- Required environment variables configured correctly in `.env.local` and Vercel.
- Team Members can authenticate via Microsoft 365 on `/signin`.
- Successful login creates/updates user and session records in the database via Prisma.
- Authenticated users are redirected to `/dashboard` (protected page).
- Unauthenticated users are redirected to `/signin` when accessing protected routes.
- Protected layout renders correctly for authenticated users.
- tRPC API endpoint functions and has access to `db` and `session`.
- `roles` table is populated with required roles.
- The designated Admin user has the correct `roleId`.
- ESLint and Prettier tools run without critical errors.
</PRD> 