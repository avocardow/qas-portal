<context>
# Overview
**Project:** QAS Portal - Client Authentication Setup (MVP Phase 0b)
**Context7 Usage:** Leverage Context7 for referencing official NextAuth.js, Next.js, Supabase, Prisma, and tRPC documentation.
**Cursor Rules:** Follow the established Cursor rules for file structure, naming conventions, and templating guidelines.
</context>
<PRD>
# 1. Introduction

## 1.1 Purpose
To define the requirements for implementing the client-facing passwordless authentication mechanism for the QLD Audit Specialists (QAS) Portal using NextAuth.js Email Provider (Magic Link).

## 1.2 Scope
This PRD covers:
- NextAuth.js EmailProvider configuration for Magic Link passwordless authentication.
- Transactional email service setup for delivering magic links (Resend, SendGrid, SES).
- Sign In page UI updates to support the client login flow.
- Backend tRPC logic for Admins to invite Client Contacts and trigger account activation.
- Client-facing Account Activation page to complete setup.

## 1.3 Out of Scope
- Dashboard and document upload pages or any client portal feature beyond authentication.
- Client password reset flows (not required for passwordless).
- Team Member authentication (already implemented in Phase 0a).

## 1.4 Context
- Assumes completion of MVP Phase 0a with M365 (Team Member) auth via NextAuth.js.
- Stack: Next.js (App Router), TypeScript, Supabase (PostgreSQL), Prisma, tRPC, NextAuth.js.
- Database includes `users` and `contacts` tables linked by `contacts.portalUserId`.

# 2. Goals
- Enable secure, passwordless authentication for registered Client Contacts via email magic links.
- Provide Admins a mechanism to invite Client Contacts and initiate their portal onboarding.
- Distinct client login path on the main Sign In page.
- Correctly create and link client user accounts in the database upon activation.
- Ensure reliable delivery and verification of authentication emails.

# 3. Specific Requirements

## 3.1 Authentication Provider (NextAuth.js)

### 3.1.1 Email Provider Configuration
- Add `EmailProvider` to NextAuth.js options (`app/api/auth/[...nextauth]/route.ts`).
- Configure `server` option with environment variables:
  - `EMAIL_SERVER_HOST`
  - `EMAIL_SERVER_PORT`
  - `EMAIL_SERVER_USER`
  - `EMAIL_SERVER_PASSWORD`
  - `EMAIL_FROM`
- Set `from` address for magic link emails.
- Ensure Prisma Adapter supports EmailProvider user creation and linking.

### 3.1.2 Email Service Setup
- Set up transactional email service (e.g., Resend) account and obtain API keys.
- Configure domain verification (DKIM, SPF) for high deliverability.

## 3.2 Sign In Page UI (`/signin`)

### 3.2.1 Client Login Section
- Add a separate section or card for client email login.

### 3.2.2 Email Input
- Provide an input field for client email address.

### 3.2.3 Submit Button
- Add button labeled `Send Login Link` to initiate magic link flow.

### 3.2.4 User Guidance
- Clearly differentiate between:
  - Team Member (M365) authentication button.
  - Client (Email) login form.

## 3.3 Client Invitation & Account Creation (Admin Initiated)

### 3.3.1 Backend (tRPC Procedure)
- Create `user.inviteClientContact` mutation:
  - **Input:** `contactId`
  - **Logic:**
    1. Verify caller has `Admin` role.
    2. Fetch `Contact` by `contactId` (must have email, `portalUserId` null).
    3. Create `User` record:
       - `email` from `Contact`
       - `roleId = Client`
       - `emailVerified = null`
    4. Update `Contact`:
       - `canLoginToPortal = true`
       - `portalUserId` link to new user.
    5. Generate secure, time-limited activation token (store in `VerificationToken`).
    6. Send `Client Portal Invitation` email including activation link with token.

### 3.3.2 Frontend (UI Trigger)
- On `/clients/[clientId]`, next to each contact:
  - Show `Invite to Portal` button if `canLoginToPortal = false`.
  - On click, call `user.inviteClientContact` mutation.
  - Provide success/error feedback (e.g., toast notifications).

## 3.4 Account Activation Page (`/complete-setup`)

### 3.4.1 Page Creation
- Create public route `src/app/complete-setup/page.tsx`.

### 3.4.2 Token Handling
- Read `activationToken` from URL query.
- Call tRPC or API route to validate token.

### 3.4.3 Backend (Token Validation)
- Create `user.activateClientAccount` procedure:
  - **Input:** `activationToken`
  - **Logic:**
    1. Validate token (existence, expiry).
    2. Mark `User.emailVerified` with current timestamp.
    3. Delete or invalidate token.
    4. Return success or error.

### 3.4.4 Frontend UI
- Show loading state during validation.
- On success: display confirmation and link to `/signin`.
- On failure: show error message and support instructions.

# 4. Acceptance Criteria
- EmailProvider configured and magic link emails send successfully.
- Sign In page displays separate login options clearly.
- Clients receive magic links and authenticate successfully (redirect to placeholder `/portal/dashboard`).
- Admin can invite contacts via UI, creating `User` and updating `Contact`.
- Invitation email link navigates to `/complete-setup`.
- Activation token validated, `emailVerified` set.
- Clear success/error messages on activation page.
- Post-activation, clients log in via magic link flow as expected.
</PRD> 